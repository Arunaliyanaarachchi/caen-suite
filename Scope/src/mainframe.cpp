/////////////////////////////////////////////////////////////////////////////
// Name:        mainframe.cpp
// Purpose:     
// Author:      NDA
// Modified by: 
// Created:     04/03/06 14:18:40
// RCS-ID:      
// Copyright:   CAEN S.p.A All rights reserved.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 04/03/06 14:18:40
#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "mainframe.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"
#include "wx/tokenzr.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif
#include <wx/cmndata.h>
#include <wx/colordlg.h>
#include <wx/log.h>
#include <wx/dir.h>
#include <wx/dirdlg.h> 
#include <wx/generic/dirdlgg.h>
#include <wx/datetime.h>
#include <wx/list.h>
#include <wx/filename.h>

////@begin includes
////@end includes

#include "generic_board.h"
#include "common_ch_control.h"
#include "virtual_common_ch_control.h"
#include "trigger_ch_control.h"
#include "view_ch_control.h"
#include "record_ch_control.h"
#include "drawing_panel.h"
#include "infodialog.h"
#include "cursor_ch_control.h"
#include "V1740_board.h"
#include "mainframe.h"
#include "wxBackgroundBitmap.h"
#include "cvt_V1724.h"
#include "device_select_dialog.h"

////@begin XPM images
////@end XPM images

static const double SEC_PER_DIV_TABLE[]=
{
	0.000000001,		//   1 nS
	0.000000002,		//   2 nS
	0.000000004,		//   4 nS

	0.000000010,		//  10 nS
	0.000000020,		//  20 nS
	0.000000040,		//  40 nS

	0.000000100,		// 100 nS
	0.000000200,		// 200 nS
	0.000000400,		// 400 nS

	0.000001000,		//   1 uS
	0.000002000,		//   2 uS
	0.000004000,		//   4 uS

	0.000010000,		//  10 uS
	0.000020000,		//  20 uS
	0.000040000,		//  40 uS

	0.000100000,		// 100 uS
	0.000200000,		// 200 uS
	0.000400000,		// 400 uS

	0.001000000,		//   1 mS
	0.002000000,		//   2 mS
	0.004000000,		//   4 mS

	0.010000000,		//  10 mS
	0.020000000,		//  20 mS
	0.040000000,		//  40 mS

};

DrawingPanel* MainFrame::g_scope_panel_array[];
wxStatusBar* MainFrame::g_main_statusbar= NULL;
wxPanel* MainFrame::g_samples_ready_control= NULL;
wxFrame* g_main_frame= NULL;
/*!
* MainFrame type definition
*/

DEFINE_EVENT_TYPE( wxEVT_RECORD_END_EVENT)

IMPLEMENT_CLASS( MainFrame, wxFrame )

/*!
* MainFrame event table definition
*/

BEGIN_EVENT_TABLE( MainFrame, wxFrame )

////@begin MainFrame event table entries
    EVT_CLOSE( MainFrame::OnCloseWindow )
    EVT_SIZE( MainFrame::OnSize )

    EVT_SASH_DRAGGED( ID_SASHLAYOUTWINDOW2, MainFrame::OnBottomWindowSashDragged )

    EVT_TOGGLEBUTTON( ID_COMMON_RUN_TOGGLEBUTTON, MainFrame::OnCommonRunTogglebuttonClick )

    EVT_TOGGLEBUTTON( ID_FRONT_PANEL_NIM_TOGGLEBUTTON, MainFrame::OnFrontPanelNimTogglebuttonClick )

    EVT_CHOICE( ID_SIZE_X_CHOICE, MainFrame::OnSizeXChoiceSelected )

    EVT_BUTTON( ID_MAIN_DAC_RESET_BUTTON, MainFrame::OnMainDacResetButtonClick )

    EVT_SPIN( ID_MAIN_DAC_OFFSET_SPINBUTTON, MainFrame::OnMainDacOffsetSpinbuttonUpdated )

    EVT_TOGGLEBUTTON( ID_TRIGGER_EXT_TOGGLEBUTTON, MainFrame::OnTriggerExtTogglebuttonClick )

    EVT_TOGGLEBUTTON( ID_TRIGGER_AUTO_TOGGLEBUTTON, MainFrame::OnTriggerAutoTogglebuttonClick )

    EVT_BUTTON( ID_TRIGGER_FORCE_BUTTON, MainFrame::OnTriggerForceButtonClick )

    EVT_SPINCTRL( ID_TRIGGER_POST_SPINCTRL, MainFrame::OnTriggerPostSpinctrlUpdated )

    EVT_CHECKBOX( ID_TRIGGER_POSITION_KEEP_CHECKBOX, MainFrame::OnTriggerPositionKeepCheckboxClick )

    EVT_CHOICE( ID_TRIGGER_EDGE_CHOICE, MainFrame::OnTriggerEdgeChoiceSelected )

    EVT_CHECKLISTBOX( ID_TRIGGER_CHANNEL_ENABLED_CHECKLISTBOX, MainFrame::OnTriggerChannelEnabledChecklistboxToggled )

    EVT_TOGGLEBUTTON( ID_RECORDTOGGLEBUTTON, MainFrame::OnRecordtogglebuttonClick )

    EVT_CHECKBOX( ID_RECORD_MAX_BUFFERS_CHECKBOX, MainFrame::OnRecordMaxBuffersCheckboxClick )

    EVT_TEXT( ID_RECORDDIRTEXTCTRL, MainFrame::OnRecorddirtextctrlUpdated )
    EVT_TEXT_ENTER( ID_RECORDDIRTEXTCTRL, MainFrame::OnRecorddirtextctrlEnter )

    EVT_BUTTON( ID_RECORDDIRBUTTON, MainFrame::OnRecorddirbuttonClick )

    EVT_SASH_DRAGGED( ID_SASHLAYOUTWINDOW, MainFrame::OnLeftWindowSashDragged )

    EVT_BUTTON( ID_BACK_CHOOSE_COLOR_1_BUTTON, MainFrame::OnBackChooseColor1ButtonClick )

    EVT_BUTTON( ID_GRID_CHOOSE_COLOR_1_BUTTON, MainFrame::OnGridChooseColor1ButtonClick )

    EVT_SPINCTRL( ID_GRID_LINE_WIDTH_1_SPINCTRL, MainFrame::OnGridLineWidth1SpinctrlUpdated )

    EVT_CHOICE( ID_GRID_LINE_TYPE_1_CHOICE, MainFrame::OnGridLineType1ChoiceSelected )

    EVT_CHOICE( ID_SEC_PER_DIV_1_CHOICE, MainFrame::OnSecPerDiv1ChoiceSelected )

    EVT_BUTTON( ID_OFFSET_SEC_RESET_1_BUTTON, MainFrame::OnOffsetSecReset1ButtonClick )

    EVT_SPIN( ID_OFFSET_SEC_POSITION_1_SPINBUTTON, MainFrame::OnOffsetSecPosition1SpinbuttonUpdated )

    EVT_BUTTON( ID_BACK_CHOOSE_COLOR_2_BUTTON, MainFrame::OnBackChooseColor2ButtonClick )

    EVT_BUTTON( ID_GRID_CHOOSE_COLOR_2_BUTTON, MainFrame::OnGridChooseColor2ButtonClick )

    EVT_SPINCTRL( ID_GRID_LINE_WIDTH_2_SPINCTRL, MainFrame::OnGridLineWidth2SpinctrlUpdated )

    EVT_CHOICE( ID_GRID_LINE_TYPE_2_CHOICE, MainFrame::OnGridLineType2ChoiceSelected )

    EVT_CHOICE( ID_SEC_PER_DIV_2_CHOICE, MainFrame::OnSecPerDiv2ChoiceSelected )

    EVT_BUTTON( ID_OFFSET_SEC_RESET_2_BUTTON, MainFrame::OnOffsetSecReset2ButtonClick )

    EVT_SPIN( ID_OFFSET_SEC_POSITION_2_SPINBUTTON, MainFrame::OnOffsetSecPosition2SpinbuttonUpdated )

    EVT_BUTTON( ID_BACK_CHOOSE_COLOR_3_BUTTON, MainFrame::OnBackChooseColor3ButtonClick )

    EVT_BUTTON( ID_GRID_CHOOSE_COLOR_3_BUTTON, MainFrame::OnGridChooseColor3ButtonClick )

    EVT_SPINCTRL( ID_GRID_LINE_WIDTH_3_SPINCTRL, MainFrame::OnGridLineWidth3SpinctrlUpdated )

    EVT_CHOICE( ID_GRID_LINE_TYPE_3_CHOICE, MainFrame::OnGridLineType3ChoiceSelected )

    EVT_CHOICE( ID_SEC_PER_DIV_3_CHOICE, MainFrame::OnSecPerDiv3ChoiceSelected )

    EVT_BUTTON( ID_OFFSET_SEC_RESET_3_BUTTON, MainFrame::OnOffsetSecReset3ButtonClick )

    EVT_SPIN( ID_OFFSET_SEC_POSITION_3_SPINBUTTON, MainFrame::OnOffsetSecPosition3SpinbuttonUpdated )

    EVT_BUTTON( ID_BACK_CHOOSE_COLOR_4_BUTTON, MainFrame::OnBackChooseColor4ButtonClick )

    EVT_BUTTON( ID_GRID_CHOOSE_COLOR_4_BUTTON, MainFrame::OnGridChooseColor4ButtonClick )

    EVT_SPINCTRL( ID_GRID_LINE_WIDTH_4_SPINCTRL, MainFrame::OnGridLineWidth4SpinctrlUpdated )

    EVT_CHOICE( ID_GRID_LINE_TYPE_4_CHOICE, MainFrame::OnGridLineType4ChoiceSelected )

    EVT_CHOICE( ID_SEC_PER_DIV_4_CHOICE, MainFrame::OnSecPerDiv4ChoiceSelected )

    EVT_BUTTON( ID_OFFSET_SEC_RESET_4_BUTTON, MainFrame::OnOffsetSecReset4ButtonClick )

    EVT_SPIN( ID_OFFSET_SEC_POSITION_4_SPINBUTTON, MainFrame::OnOffsetSecPosition4SpinbuttonUpdated )

    EVT_SPLITTER_SASH_POS_CHANGED( ID_SCOPE_HORIZ_SPLITTERWINDOW, MainFrame::OnScopeHorizSplitterwindowSashPosChanged )

    EVT_MENU( ID_EXIT_TOOL, MainFrame::OnExitToolClick )

    EVT_MENU( ID_CONNECT_TOOL, MainFrame::OnConnectToolClick )

    EVT_MENU( ID_VIEW_LEFT_TOOL, MainFrame::OnViewLeftToolClick )

    EVT_MENU( ID_VIEW_BOTTOM_TOOL, MainFrame::OnViewBottomToolClick )

    EVT_MENU( ID_VIEW_SCOPE_LEFT_TOP_TOOL, MainFrame::OnViewScopeLeftTopToolClick )

    EVT_MENU( ID_VIEW_SCOPE_RIGHT_TOP_TOOL, MainFrame::OnViewScopeRightTopToolClick )

    EVT_MENU( ID_VIEW_SCOPE_LEFT_BOTTOM_TOOL, MainFrame::OnViewScopeLeftBottomToolClick )

    EVT_MENU( ID_VIEW_SCOPE_RIGHT_BOTTOM_TOOL, MainFrame::OnViewScopeRightBottomToolClick )

    EVT_MENU( ID_HELP_TOOL, MainFrame::OnHelpToolClick )

////@end MainFrame event table entries
    EVT_TEXT_ENTER( ID_GRID_LINE_WIDTH_1_SPINCTRL, MainFrame::OnGridLineWidth1SpinctrlTextUpdated )
    EVT_TEXT_ENTER( ID_GRID_LINE_WIDTH_2_SPINCTRL, MainFrame::OnGridLineWidth2SpinctrlTextUpdated )
    EVT_TEXT_ENTER( ID_GRID_LINE_WIDTH_3_SPINCTRL, MainFrame::OnGridLineWidth3SpinctrlTextUpdated )
    EVT_TEXT_ENTER( ID_GRID_LINE_WIDTH_4_SPINCTRL, MainFrame::OnGridLineWidth4SpinctrlTextUpdated )
    EVT_TEXT_ENTER( ID_TRIGGER_POST_SPINCTRL, MainFrame::OnTriggerPostSpinctrlTextUpdated )
    EVT_SPLITTER_SASH_POS_CHANGED( ID_SCOPE_VERT_TOP_SPLITTERWINDOW, MainFrame::OnScopeVertTopSplitterwindowSashPosChanged )
    EVT_SPLITTER_SASH_POS_CHANGED( ID_SCOPE_VERT_BOTTOM_SPLITTERWINDOW, MainFrame::OnScopeVertBottomSplitterwindowSashPosChanged )
	EVT_COMMAND( BOARD_WORKER_THREAD_ID, wxEVT_RECORD_END_EVENT, MainFrame::OnRecordEnd)

END_EVENT_TABLE()


/*!
* MainFrame constructors
*/

MainFrame::MainFrame( )
{
	g_main_frame= this;
}

MainFrame::MainFrame( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->m_scope_panel_array[ i] = NULL;
	}
	Create( parent, id, caption, pos, size, style );
	g_main_frame= this;
}
MainFrame::~MainFrame( ) {
	for( int i= 0; i< (int)this->m_size_X_control->GetCount(); i++) {
		void *data= this->m_size_X_control->GetClientData( i);
		if( data) {
			delete (int*)data;
		}
	}
}

/*!
* MainFrame creator
*/

bool MainFrame::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
	////@begin MainFrame member initialisation
    m_bottom_pane = NULL;
    m_common_settings_notebook = NULL;
    m_common_panel = NULL;
    m_common_main_sizer = NULL;
    m_common_run_control = NULL;
    m_samples_ready_control = NULL;
    m_common_TTL_control = NULL;
    m_size_X_control = NULL;
    m_DAC_sizer = NULL;
    m_ch_DAC_reset_control = NULL;
    m_ch_DAC_control = NULL;
    m_DAC_offset_label = NULL;
    m_common_panel_HBoxSizer = NULL;
    m_trigger_panel = NULL;
    m_trigger_main_sizer = NULL;
    m_trigger_ext_control = NULL;
    m_trigger_auto_control = NULL;
    m_force_trigger_control = NULL;
    m_trigger_post_control = NULL;
    m_trigger_position_keep_control = NULL;
    m_trigger_edge_control = NULL;
    m_trigger_channel_sizer = NULL;
    m_trigger_panel_HBoxSizer = NULL;
    m_trigger_enabled_channel_sizer = NULL;
    m_triggerEnabledChannelControl = NULL;
    m_record_panel = NULL;
    m_record_main_sizer = NULL;
    m_record_start_stop_control = NULL;
    m_record_max_buffers_check_box = NULL;
    m_record_max_buffers_control = NULL;
    m_record_folder_sizer = NULL;
    m_record_dir_control = NULL;
    m_record_dir_browse_button = NULL;
    m_record_panel_HBoxSizer = NULL;
    m_left_pane = NULL;
    m_specific_settings_notebook = NULL;
    m_specific_settings_scope_1_notebook = NULL;
    m_view_scope_1_panel = NULL;
    m_view_1_main_sizer = NULL;
    m_back_color_1_control = NULL;
    m_grid_color_1_control = NULL;
    m_grid_line_width_1_control = NULL;
    m_grid_line_type_1_control = NULL;
    m_main_sizer_1_text = NULL;
    m_sec_per_div_1_control = NULL;
    m_offset_sec_reset_1_control = NULL;
    m_offset_sec_position_1_control = NULL;
    m_offset_sec_multiplier_1_control = NULL;
    m_offset_position_1_static = NULL;
    m_view_1_channel_sizer = NULL;
    m_view_1_panel_VBoxSizer = NULL;
    m_cursor_1_panel = NULL;
    m_cursor_1_main_sizer = NULL;
    m_specific_settings_scope_2_notebook = NULL;
    m_view_scope_2_panel = NULL;
    m_view_2_main_sizer = NULL;
    m_back_color_2_control = NULL;
    m_grid_color_2_control = NULL;
    m_grid_line_width_2_control = NULL;
    m_grid_line_type_2_control = NULL;
    m_main_sizer_2_text = NULL;
    m_sec_per_div_2_control = NULL;
    m_offset_sec_reset_2_control = NULL;
    m_offset_sec_position_2_control = NULL;
    m_offset_sec_multiplier_2_control = NULL;
    m_offset_position_2_static = NULL;
    m_view_2_channel_sizer = NULL;
    m_view_2_panel_VBoxSizer = NULL;
    m_cursor_2_panel = NULL;
    m_cursor_2_main_sizer = NULL;
    m_specific_settings_scope_3_notebook = NULL;
    m_view_scope_3_panel = NULL;
    m_view_3_main_sizer = NULL;
    m_back_color_3_control = NULL;
    m_grid_color_3_control = NULL;
    m_grid_line_width_3_control = NULL;
    m_grid_line_type_3_control = NULL;
    m_main_sizer_3_text = NULL;
    m_sec_per_div_3_control = NULL;
    m_offset_sec_reset_3_control = NULL;
    m_offset_sec_position_3_control = NULL;
    m_offset_sec_multiplier_3_control = NULL;
    m_offset_position_3_static = NULL;
    m_view_3_channel_sizer = NULL;
    m_view_3_panel_VBoxSizer = NULL;
    m_cursor_3_panel = NULL;
    m_cursor_3_main_sizer = NULL;
    m_specific_settings_scope_4_notebook = NULL;
    m_view_scope_4_panel = NULL;
    m_view_4_main_sizer = NULL;
    m_back_color_4_control = NULL;
    m_grid_color_4_control = NULL;
    m_grid_line_width_4_control = NULL;
    m_grid_line_type_4_control = NULL;
    m_main_sizer_4_text = NULL;
    m_sec_per_div_4_control = NULL;
    m_offset_sec_reset_4_control = NULL;
    m_offset_sec_position_4_control = NULL;
    m_offset_sec_multiplier_4_control = NULL;
    m_offset_position_4_static = NULL;
    m_view_4_channel_sizer = NULL;
    m_view_4_panel_VBoxSizer = NULL;
    m_cursor_4_panel = NULL;
    m_cursor_4_main_sizer = NULL;
    m_top_pane = NULL;
    m_scope_notebook = NULL;
    m_scope_horiz_splitter = NULL;
    m_main_toolbar = NULL;
    m_main_statusbar = NULL;
	////@end MainFrame member initialisation

	wxFileName::SetCwd( AppSettings::GetExecutablePath());
	
	//
	// Load application settings
	this->m_app_settings= new AppSettings( MainFrame::ScopeRefresh, MainFrame::UpdateSamplesReadyLed);

	// 
	// Load Application settings
	if( !this->m_app_settings->Load( ))
	{
		wxLogError( _("Error loading application settings ..."));
		return false;
	}

	////@begin MainFrame creation
    wxFrame::Create( parent, id, caption, pos, size, style );

    this->SetFont(wxFont(9, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Verdana")));
    CreateControls();
    SetIcon(GetIconResource(wxT("scope2.png")));
    Centre();
	////@end MainFrame creation
	
	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->m_scope_panel_array[ i]->m_app_settings= this->m_app_settings;
	}

    Centre();


	if( this->m_app_settings->m_show_bottom_pane)
	{
		this->m_main_toolbar->ToggleTool( ID_VIEW_BOTTOM_TOOL, true);
	}
	this->DoShowHideBottomPane(m_app_settings->m_show_bottom_pane);
	
	if( this->m_app_settings->m_show_left_pane)
	{
		this->m_main_toolbar->ToggleTool( ID_VIEW_LEFT_TOOL, true);
	}
	this->DoShowHideLeftPane(this->m_app_settings->m_show_left_pane);
	
	// Add scope panels show/ hide state
	if( this->m_app_settings->m_show_scope_left_top_pane)
	{
		this->m_main_toolbar->ToggleTool( ID_VIEW_SCOPE_LEFT_TOP_TOOL, true);
	}
	this->DoShowHideScopeLeftTopPane( this->m_app_settings->m_show_scope_left_top_pane, false);

	if( this->m_app_settings->m_show_scope_right_top_pane)
	{
		this->m_main_toolbar->ToggleTool( ID_VIEW_SCOPE_RIGHT_TOP_TOOL, true);
	}
	this->DoShowHideScopeRightTopPane( this->m_app_settings->m_show_scope_right_top_pane, false);

	if( this->m_app_settings->m_show_scope_left_bottom_pane)
	{
		this->m_main_toolbar->ToggleTool( ID_VIEW_SCOPE_LEFT_BOTTOM_TOOL, true);
	}
	this->DoShowHideScopeLeftBottomPane( this->m_app_settings->m_show_scope_left_bottom_pane, false);

	if( this->m_app_settings->m_show_scope_right_bottom_pane)
	{
		this->m_main_toolbar->ToggleTool( ID_VIEW_SCOPE_RIGHT_BOTTOM_TOOL, true);
	}
	this->DoShowHideScopeRightBottomPane( this->m_app_settings->m_show_scope_right_bottom_pane, false);

	if( this->m_app_settings->m_started)
	{
		// set connection but don't prompt user
		SetConnected( true, false);

		this->m_common_run_control->SetValue( true);
		this->DoStartStopRunning( );
	}
	else
	{
		SetConnected( false);
	}

	this->Layout();
	return true;
}

bool MainFrame::CreateDynControls()
{
	// Cleanup child controls
	this->m_common_panel_HBoxSizer->Clear( true);
	this->m_trigger_panel_HBoxSizer->Clear( true);
	this->m_record_panel_HBoxSizer->Clear( true);
	this->m_view_1_panel_VBoxSizer->Clear( true);
	this->m_view_2_panel_VBoxSizer->Clear( true);
	this->m_view_3_panel_VBoxSizer->Clear( true);
	this->m_view_4_panel_VBoxSizer->Clear( true);
	//this->m_cursor_1_main_sizer->Clear( true);
	//this->m_cursor_2_main_sizer->Clear( true);
	//this->m_cursor_3_main_sizer->Clear( true);
	//this->m_cursor_4_main_sizer->Clear( true);

	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		wxChoice *multiplierControl= NULL;
		wxSpinButton *spinControl= NULL;
		switch( i)
		{
		case 0: 
			multiplierControl= m_offset_sec_multiplier_1_control;
			spinControl= m_offset_sec_position_1_control;
			break;
		case 1: 
			multiplierControl= m_offset_sec_multiplier_2_control;
			spinControl= m_offset_sec_position_2_control;
			break;
		case 2: 
			multiplierControl= m_offset_sec_multiplier_3_control;
			spinControl= m_offset_sec_position_3_control;
			break;
		case 3: 
			multiplierControl= m_offset_sec_multiplier_4_control;
			spinControl= m_offset_sec_position_4_control;
			break;
		default:
			wxASSERT( false);
			break;
		}
		multiplierControl->Append( _("x   1"));
		multiplierControl->Append( _("x  10"));
		multiplierControl->Append( _("x 100"));
		multiplierControl->Append( _("x1000"));

		multiplierControl->SetSelection( 0);

		spinControl->SetRange( -999999999, 999999999);

	}
	// Channel controls
	int ch_count= 0;
	int virt_ch_count= 0;

	m_skipTriggerUpdate= true;
	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		//
		// Cursor controls: TODO add handling for multiple boards
		for( int scope_index= 0; scope_index< SCOPE_NUM_PANELS; scope_index++)
		{
			m_cursor_ch_ctrl[scope_index]->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i]);
		}

		//size_t i= 0;
		bool show_dac= true;
		switch( ((GenericBoard*)this->m_app_settings->m_board_array[i])->GetType())
		{
			case CVT_V1740:
			//case DT5740:
			//case N6740:
				ch_count= (((V1740Board*)this->m_app_settings->m_board_array[i])->m_channel_group)<<3;
				show_dac= false;
				break;
		}
		m_trigger_enabled_channel_sizer->Show( !show_dac);
		for( size_t j= 0; j< ((GenericBoard*)this->m_app_settings->m_board_array[i])->m_channel_array.GetCount(); j++, ch_count++)
		{
			//
			// Common controls
			CommonChControl *common_ch_ctrl= new CommonChControl( this->m_common_panel, show_dac);
			common_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count);

			m_common_panel_HBoxSizer->Add( common_ch_ctrl, 0, wxGROW|wxALL, 1);

			if( !show_dac) {
				if( ((V1740Board*)this->m_app_settings->m_board_array[i])->m_channel_group== (int)j) {
					//
					// Trigger controls
					TriggerChControl *trigger_ch_ctrl= new TriggerChControl( this->m_trigger_panel);
					trigger_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ((V1740Board*)this->m_app_settings->m_board_array[i])->m_channel_group);
					m_trigger_panel_HBoxSizer->Add( trigger_ch_ctrl, 0, wxGROW|wxALL, 1);
					
					m_triggerEnabledChannelControl->Clear();
					int chMsk= ((GenericBoard*)this->m_app_settings->m_board_array[i])->GetChEnableMsk();
					int chIndex= 0;
					while( chMsk) 
					{
						m_triggerEnabledChannelControl->AppendString( wxString::Format( _("Channel %d"), chIndex));
						int itemIndex= m_triggerEnabledChannelControl->GetCount()- 1;
						m_triggerEnabledChannelControl->Check( itemIndex, true);
						chMsk&= ~( 1<< chIndex);
						chIndex++;
					}
				}
			} else {
				//
				// Trigger controls
				TriggerChControl *trigger_ch_ctrl= new TriggerChControl( this->m_trigger_panel);
				trigger_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count);
				m_trigger_panel_HBoxSizer->Add( trigger_ch_ctrl, 0, wxGROW|wxALL, 1);
			}
			//
			// Record controls
			RecordChControl *record_ch_ctrl= new RecordChControl( this->m_record_panel);
			record_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count, false);

			m_record_panel_HBoxSizer->Add( record_ch_ctrl, 0, wxGROW|wxALL, 1);

			//
			// View controls
			ViewChControl *view_1_ch_ctrl= new ViewChControl( this->m_view_scope_1_panel);
			view_1_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count, 0, false);
			m_view_1_panel_VBoxSizer->Add( view_1_ch_ctrl, 0, wxGROW|wxALL, 1);

			ViewChControl *view_2_ch_ctrl= new ViewChControl( this->m_view_scope_2_panel);
			view_2_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count, 1, false);
			m_view_2_panel_VBoxSizer->Add( view_2_ch_ctrl, 0, wxGROW|wxALL, 1);

			ViewChControl *view_3_ch_ctrl= new ViewChControl( this->m_view_scope_3_panel);
			view_3_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count, 2, false);
			m_view_3_panel_VBoxSizer->Add( view_3_ch_ctrl, 0, wxGROW|wxALL, 1);

			ViewChControl *view_4_ch_ctrl= new ViewChControl( this->m_view_scope_4_panel);
			view_4_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count, 3, false);
			m_view_4_panel_VBoxSizer->Add( view_4_ch_ctrl, 0, wxGROW|wxALL, 1);

			////
			//// Cursor controls
			//CursorChControl *cursor_1_ch_ctrl= new CursorChControl( this->m_cursor_1_panel);
			//cursor_1_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count, 0, false);
			//this->m_cursor_1_main_sizer->Add( cursor_1_ch_ctrl, 0, wxGROW|wxALL, 1);

			//CursorChControl *cursor_2_ch_ctrl= new CursorChControl( this->m_cursor_2_panel);
			//cursor_2_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count, 1, false);
			//this->m_cursor_2_main_sizer->Add( cursor_2_ch_ctrl, 0, wxGROW|wxALL, 1);

			//CursorChControl *cursor_3_ch_ctrl= new CursorChControl( this->m_cursor_3_panel);
			//cursor_3_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count, 2, false);
			//this->m_cursor_3_main_sizer->Add( cursor_3_ch_ctrl, 0, wxGROW|wxALL, 1);

			//CursorChControl *cursor_4_ch_ctrl= new CursorChControl( this->m_cursor_4_panel);
			//cursor_4_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, ch_count, 3, false);
			//this->m_cursor_4_main_sizer->Add( cursor_4_ch_ctrl, 0, wxGROW|wxALL, 1);
		}

		// Virtual Channels
		for( size_t j= 0; j< ((GenericBoard*)this->m_app_settings->m_board_array[i])->m_virtual_channel_array.GetCount(); j++, virt_ch_count++)
		{
			//
			// Common controls
			VirtualCommonChControl *common_ch_ctrl= new VirtualCommonChControl( this->m_common_panel);
			common_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count);

			m_common_panel_HBoxSizer->Add( common_ch_ctrl, 0, wxGROW|wxALL, 1);

			//
			// Record controls
			RecordChControl *record_ch_ctrl= new RecordChControl( this->m_record_panel);
			record_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count, true);

			m_record_panel_HBoxSizer->Add( record_ch_ctrl, 0, wxGROW|wxALL, 1);

			//
			// View controls
			ViewChControl *view_1_ch_ctrl= new ViewChControl( this->m_view_scope_1_panel);
			view_1_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count, 0, true);
			m_view_1_panel_VBoxSizer->Add( view_1_ch_ctrl, 0, wxGROW|wxALL, 1);

			ViewChControl *view_2_ch_ctrl= new ViewChControl( this->m_view_scope_2_panel);
			view_2_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count, 1, true);
			m_view_2_panel_VBoxSizer->Add( view_2_ch_ctrl, 0, wxGROW|wxALL, 1);

			ViewChControl *view_3_ch_ctrl= new ViewChControl( this->m_view_scope_3_panel);
			view_3_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count, 2, true);
			m_view_3_panel_VBoxSizer->Add( view_3_ch_ctrl, 0, wxGROW|wxALL, 1);

			ViewChControl *view_4_ch_ctrl= new ViewChControl( this->m_view_scope_4_panel);
			view_4_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count, 3, true);
			m_view_4_panel_VBoxSizer->Add( view_4_ch_ctrl, 0, wxGROW|wxALL, 1);

			////
			//// Cursor controls
			//CursorChControl *cursor_1_ch_ctrl= new CursorChControl( this->m_cursor_1_panel);
			//cursor_1_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count, 0, true);
			//this->m_cursor_1_main_sizer->Add( cursor_1_ch_ctrl, 0, wxGROW|wxALL, 1);

			//CursorChControl *cursor_2_ch_ctrl= new CursorChControl( this->m_cursor_2_panel);
			//cursor_2_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count, 1, true);
			//this->m_cursor_2_main_sizer->Add( cursor_2_ch_ctrl, 0, wxGROW|wxALL, 1);

			//CursorChControl *cursor_3_ch_ctrl= new CursorChControl( this->m_cursor_3_panel);
			//cursor_3_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count, 2, true);
			//this->m_cursor_3_main_sizer->Add( cursor_3_ch_ctrl, 0, wxGROW|wxALL, 1);

			//CursorChControl *cursor_4_ch_ctrl= new CursorChControl( this->m_cursor_4_panel);
			//cursor_4_ch_ctrl->SetupBoard( (GenericBoard*)this->m_app_settings->m_board_array[i], j, virt_ch_count, 3, true);
			//this->m_cursor_4_main_sizer->Add( cursor_4_ch_ctrl, 0, wxGROW|wxALL, 1);
		}
		// HACK : TBD for multiple board handling
		this->m_DAC_offset_label->Show( show_dac);
		this->m_DAC_sizer->Show( !show_dac);
		if( !show_dac) {
			this->m_trigger_channel_sizer->GetStaticBox()->SetLabel(_T(""));
		}
	}
	m_skipTriggerUpdate= false;
	Layout();
	this->m_common_panel_HBoxSizer->Layout();
	return true;
}

/*!
* Control creation for MainFrame
*/

void MainFrame::CreateControls()
{    
	////@begin MainFrame content construction
    // Generated by DialogBlocks, 30/11/2010 11:41:00 (unregistered)

    MainFrame* itemFrame1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemFrame1->SetSizer(itemBoxSizer2);

    m_bottom_pane = new wxSashLayoutWindow( itemFrame1, ID_SASHLAYOUTWINDOW2, wxDefaultPosition, itemFrame1->ConvertDialogToPixels(wxSize(66, 110)), wxSW_3DBORDER|wxSW_3DSASH|wxNO_BORDER );
    m_bottom_pane->SetSashVisible(wxSASH_TOP, true);
    m_bottom_pane->SetOrientation(wxLAYOUT_HORIZONTAL);
    m_bottom_pane->SetAlignment(wxLAYOUT_BOTTOM);
    m_bottom_pane->SetDefaultSize(itemFrame1->ConvertDialogToPixels(wxSize(66, 110)));
    m_bottom_pane->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Verdana")));
    itemBoxSizer2->Add(m_bottom_pane, 0, wxGROW|wxALL, 0);

    m_common_settings_notebook = new wxNotebook( m_bottom_pane, ID_BOTTOM_NOTEBOOK, wxDefaultPosition, wxDefaultSize, wxNB_TOP );

    m_common_panel = new wxScrolledWindow( m_common_settings_notebook, ID_COMMON_SCROLLEDWINDOW, wxDefaultPosition, m_common_settings_notebook->ConvertDialogToPixels(wxSize(133, 43)), wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_common_panel->SetScrollbars(1, 1, 1, 1);
    m_common_main_sizer = new wxBoxSizer(wxHORIZONTAL);
    m_common_panel->SetSizer(m_common_main_sizer);

    wxBoxSizer* itemBoxSizer7 = new wxBoxSizer(wxVERTICAL);
    m_common_main_sizer->Add(itemBoxSizer7, 0, wxALIGN_TOP|wxALL, 5);
    m_common_run_control = new wxToggleButton( m_common_panel, ID_COMMON_RUN_TOGGLEBUTTON, _("Run"), wxDefaultPosition, wxDefaultSize, 0 );
    m_common_run_control->SetValue(false);
    m_common_run_control->SetHelpText(_("Start/Stop acqusition"));
    if (ShowToolTips())
        m_common_run_control->SetToolTip(_("Start/Stop acqusition"));
    m_common_run_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemBoxSizer7->Add(m_common_run_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_samples_ready_control = new wxPanel( m_common_panel, ID_SAMPLES_READY_PANEL, wxDefaultPosition, m_common_panel->ConvertDialogToPixels(wxSize(9, 9)), wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    m_samples_ready_control->SetHelpText(_("Samples ready status"));
    if (ShowToolTips())
        m_samples_ready_control->SetToolTip(_("Samples ready status"));
    m_samples_ready_control->SetBackgroundColour(wxColour(0, 255, 0));
    itemBoxSizer7->Add(m_samples_ready_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 1);

    wxStaticBox* itemStaticBoxSizer10Static = new wxStaticBox(m_common_panel, wxID_ANY, _("Ext. signals"));
    wxStaticBoxSizer* itemStaticBoxSizer10 = new wxStaticBoxSizer(itemStaticBoxSizer10Static, wxHORIZONTAL);
    itemBoxSizer7->Add(itemStaticBoxSizer10, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT, 2);
    m_common_TTL_control = new wxToggleButton( m_common_panel, ID_FRONT_PANEL_NIM_TOGGLEBUTTON, _("TTL"), wxDefaultPosition, wxDefaultSize, 0 );
    m_common_TTL_control->SetValue(false);
    m_common_TTL_control->SetHelpText(_("Set external signal standard  TTL\\NIM"));
    if (ShowToolTips())
        m_common_TTL_control->SetToolTip(_("Set external signal standard  TTL\\NIM"));
    m_common_TTL_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer10->Add(m_common_TTL_control, 0, wxALIGN_TOP|wxALL, 5);

    wxBoxSizer* itemBoxSizer12 = new wxBoxSizer(wxVERTICAL);
    m_common_main_sizer->Add(itemBoxSizer12, 0, wxALIGN_TOP|wxALL, 5);
    wxStaticBox* itemStaticBoxSizer13Static = new wxStaticBox(m_common_panel, wxID_ANY, _("Record length"));
    wxStaticBoxSizer* itemStaticBoxSizer13 = new wxStaticBoxSizer(itemStaticBoxSizer13Static, wxHORIZONTAL);
    itemBoxSizer12->Add(itemStaticBoxSizer13, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT, 2);
    wxString* m_size_X_controlStrings = NULL;
    m_size_X_control = new wxChoice( m_common_panel, ID_SIZE_X_CHOICE, wxDefaultPosition, m_common_panel->ConvertDialogToPixels(wxSize(46, -1)), 0, m_size_X_controlStrings, 0 );
    m_size_X_control->SetHelpText(_("Record length (samples)"));
    if (ShowToolTips())
        m_size_X_control->SetToolTip(_("Record length (samples)"));
    m_size_X_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer13->Add(m_size_X_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    wxStaticBox* itemStaticBoxSizer15Static = new wxStaticBox(m_common_panel, wxID_ANY, _("DAC Offset"));
    m_DAC_sizer = new wxStaticBoxSizer(itemStaticBoxSizer15Static, wxHORIZONTAL);
    itemBoxSizer12->Add(m_DAC_sizer, 0, wxALIGN_CENTER_HORIZONTAL, 2);
    m_DAC_sizer->Add(22, 8, 1, wxGROW|wxALL, 5);

    m_ch_DAC_reset_control = new wxButton( m_common_panel, ID_MAIN_DAC_RESET_BUTTON, _("0"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    m_ch_DAC_reset_control->SetHelpText(_("Reset DAC offset"));
    if (ShowToolTips())
        m_ch_DAC_reset_control->SetToolTip(_("Reset DAC offset"));
    m_ch_DAC_reset_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    m_DAC_sizer->Add(m_ch_DAC_reset_control, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);

    m_ch_DAC_control = new wxSpinButton( m_common_panel, ID_MAIN_DAC_OFFSET_SPINBUTTON, wxDefaultPosition, wxDefaultSize, wxSP_VERTICAL );
    m_ch_DAC_control->SetHelpText(_("Set DAC offset"));
    if (ShowToolTips())
        m_ch_DAC_control->SetToolTip(_("Set DAC offset"));
    m_DAC_sizer->Add(m_ch_DAC_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 2);

    wxStaticBox* itemStaticBoxSizer19Static = new wxStaticBox(m_common_panel, wxID_ANY, _("Channels"));
    wxStaticBoxSizer* itemStaticBoxSizer19 = new wxStaticBoxSizer(itemStaticBoxSizer19Static, wxVERTICAL);
    m_common_main_sizer->Add(itemStaticBoxSizer19, 0, wxGROW|wxALL, 5);
    wxStaticText* itemStaticText20 = new wxStaticText( m_common_panel, wxID_STATIC, _("Enable:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText20->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer19->Add(itemStaticText20, 0, wxALIGN_RIGHT|wxLEFT|wxTOP|wxBOTTOM|wxADJUST_MINSIZE, 5);

    m_DAC_offset_label = new wxStaticText( m_common_panel, wxID_STATIC, _("DAC offset:"), wxDefaultPosition, wxDefaultSize, 0 );
    m_DAC_offset_label->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer19->Add(m_DAC_offset_label, 0, wxALIGN_RIGHT|wxLEFT|wxTOP|wxBOTTOM|wxADJUST_MINSIZE, 18);

    wxStaticText* itemStaticText22 = new wxStaticText( m_common_panel, wxID_STATIC, _("Medium (mV):"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText22->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer19->Add(itemStaticText22, 0, wxALIGN_RIGHT|wxLEFT|wxTOP|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText23 = new wxStaticText( m_common_panel, wxID_STATIC, _("Over range :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText23->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer19->Add(itemStaticText23, 0, wxALIGN_RIGHT|wxLEFT|wxTOP|wxADJUST_MINSIZE, 5);

    m_common_panel_HBoxSizer = new wxBoxSizer(wxHORIZONTAL);
    m_common_main_sizer->Add(m_common_panel_HBoxSizer, 1, wxGROW|wxALL, 5);

    m_common_panel->FitInside();
    m_common_settings_notebook->AddPage(m_common_panel, _("COMMON"));

    m_trigger_panel = new wxScrolledWindow( m_common_settings_notebook, ID_TRIGGER_SCROLLEDWINDOW, wxDefaultPosition, m_common_settings_notebook->ConvertDialogToPixels(wxSize(133, 43)), wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_trigger_panel->SetScrollbars(1, 1, 1, 1);
    m_trigger_main_sizer = new wxBoxSizer(wxHORIZONTAL);
    m_trigger_panel->SetSizer(m_trigger_main_sizer);

    wxBoxSizer* itemBoxSizer27 = new wxBoxSizer(wxVERTICAL);
    m_trigger_main_sizer->Add(itemBoxSizer27, 0, wxALIGN_TOP|wxALL, 5);
    m_trigger_ext_control = new wxToggleButton( m_trigger_panel, ID_TRIGGER_EXT_TOGGLEBUTTON, _("Ext."), wxDefaultPosition, wxDefaultSize, 0 );
    m_trigger_ext_control->SetValue(false);
    m_trigger_ext_control->SetHelpText(_("Enable/Disable external trigger"));
    if (ShowToolTips())
        m_trigger_ext_control->SetToolTip(_("Enable/Disable external trigger"));
    m_trigger_ext_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemBoxSizer27->Add(m_trigger_ext_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_trigger_auto_control = new wxToggleButton( m_trigger_panel, ID_TRIGGER_AUTO_TOGGLEBUTTON, _("Auto"), wxDefaultPosition, wxDefaultSize, 0 );
    m_trigger_auto_control->SetValue(false);
    m_trigger_auto_control->SetHelpText(_("Enable/Disable auto trigger"));
    if (ShowToolTips())
        m_trigger_auto_control->SetToolTip(_("Enable/Disable auto trigger"));
    m_trigger_auto_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemBoxSizer27->Add(m_trigger_auto_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_force_trigger_control = new wxButton( m_trigger_panel, ID_TRIGGER_FORCE_BUTTON, _("Force"), wxDefaultPosition, wxDefaultSize, 0 );
    m_force_trigger_control->SetHelpText(_("Force trigger"));
    if (ShowToolTips())
        m_force_trigger_control->SetToolTip(_("Force trigger"));
    m_force_trigger_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemBoxSizer27->Add(m_force_trigger_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer31 = new wxBoxSizer(wxVERTICAL);
    m_trigger_main_sizer->Add(itemBoxSizer31, 0, wxALIGN_TOP|wxALL, 5);
    wxStaticBox* itemStaticBoxSizer32Static = new wxStaticBox(m_trigger_panel, wxID_ANY, _("Post Trigger (%)"));
    wxStaticBoxSizer* itemStaticBoxSizer32 = new wxStaticBoxSizer(itemStaticBoxSizer32Static, wxVERTICAL);
    itemBoxSizer31->Add(itemStaticBoxSizer32, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxTOP, 0);
    m_trigger_post_control = new wxSpinCtrl( m_trigger_panel, ID_TRIGGER_POST_SPINCTRL, _T("0"), wxDefaultPosition, m_trigger_panel->ConvertDialogToPixels(wxSize(60, -1)), wxSP_ARROW_KEYS, 0, 100, 0 );
    m_trigger_post_control->SetHelpText(_("Set post trigger position as percent of buffer length"));
    if (ShowToolTips())
        m_trigger_post_control->SetToolTip(_("Set post trigger position as percent of buffer length"));
    itemStaticBoxSizer32->Add(m_trigger_post_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 3);

    m_trigger_position_keep_control = new wxCheckBox( m_trigger_panel, ID_TRIGGER_POSITION_KEEP_CHECKBOX, _("Keep position"), wxDefaultPosition, wxDefaultSize, 0 );
    m_trigger_position_keep_control->SetValue(false);
    m_trigger_position_keep_control->SetHelpText(_("Keep trigger postion on screen"));
    if (ShowToolTips())
        m_trigger_position_keep_control->SetToolTip(_("Keep trigger postion on screen"));
    itemStaticBoxSizer32->Add(m_trigger_position_keep_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer35Static = new wxStaticBox(m_trigger_panel, wxID_ANY, _("Edge"));
    wxStaticBoxSizer* itemStaticBoxSizer35 = new wxStaticBoxSizer(itemStaticBoxSizer35Static, wxHORIZONTAL);
    itemBoxSizer31->Add(itemStaticBoxSizer35, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 2);
    wxString* m_trigger_edge_controlStrings = NULL;
    m_trigger_edge_control = new wxChoice( m_trigger_panel, ID_TRIGGER_EDGE_CHOICE, wxDefaultPosition, m_trigger_panel->ConvertDialogToPixels(wxSize(60, -1)), 0, m_trigger_edge_controlStrings, 0 );
    m_trigger_edge_control->SetStringSelection(_("NO TRIG"));
    m_trigger_edge_control->SetHelpText(_("Select trigger edge"));
    if (ShowToolTips())
        m_trigger_edge_control->SetToolTip(_("Select trigger edge"));
    m_trigger_edge_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer35->Add(m_trigger_edge_control, 0, wxALIGN_CENTER_VERTICAL|wxTOP, 3);

    wxStaticBox* itemStaticBoxSizer37Static = new wxStaticBox(m_trigger_panel, wxID_ANY, _("Channels"));
    m_trigger_channel_sizer = new wxStaticBoxSizer(itemStaticBoxSizer37Static, wxVERTICAL);
    m_trigger_main_sizer->Add(m_trigger_channel_sizer, 0, wxGROW|wxALL, 5);
    m_trigger_channel_sizer->Add(4, 1, 0, wxGROW|wxALL, 0);

    wxStaticText* itemStaticText39 = new wxStaticText( m_trigger_panel, wxID_STATIC, _("Enable :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText39->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    m_trigger_channel_sizer->Add(itemStaticText39, 0, wxALIGN_RIGHT|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText40 = new wxStaticText( m_trigger_panel, wxID_STATIC, _("Threshold (mV):"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText40->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    m_trigger_channel_sizer->Add(itemStaticText40, 0, wxALIGN_RIGHT|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText41 = new wxStaticText( m_trigger_panel, wxID_STATIC, _("Thr. samples :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText41->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    m_trigger_channel_sizer->Add(itemStaticText41, 0, wxALIGN_RIGHT|wxALL|wxADJUST_MINSIZE, 5);

    m_trigger_panel_HBoxSizer = new wxBoxSizer(wxHORIZONTAL);
    m_trigger_main_sizer->Add(m_trigger_panel_HBoxSizer, 1, wxGROW|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticBox* itemStaticBoxSizer43Static = new wxStaticBox(m_trigger_panel, wxID_ANY, _("Enabled Channels"));
    m_trigger_enabled_channel_sizer = new wxStaticBoxSizer(itemStaticBoxSizer43Static, wxHORIZONTAL);
    m_trigger_main_sizer->Add(m_trigger_enabled_channel_sizer, 0, wxGROW|wxALL, 5);
    wxString* m_triggerEnabledChannelControlStrings = NULL;
    m_triggerEnabledChannelControl = new wxCheckListBox( m_trigger_panel, ID_TRIGGER_CHANNEL_ENABLED_CHECKLISTBOX, wxDefaultPosition, m_trigger_panel->ConvertDialogToPixels(wxSize(70, 70)), 0, m_triggerEnabledChannelControlStrings, wxLB_MULTIPLE|wxLB_NEEDED_SB );
    m_triggerEnabledChannelControl->SetHelpText(_("Select the channels enabled for triggering"));
    if (ShowToolTips())
        m_triggerEnabledChannelControl->SetToolTip(_("Select the channels enabled for triggering"));
    m_trigger_enabled_channel_sizer->Add(m_triggerEnabledChannelControl, 0, wxALIGN_TOP|wxALL, 5);

    m_trigger_panel->FitInside();
    m_common_settings_notebook->AddPage(m_trigger_panel, _("TRIGGER"));

    m_record_panel = new wxScrolledWindow( m_common_settings_notebook, ID_RECORD_SCROLLEDWINDOW, wxDefaultPosition, m_common_settings_notebook->ConvertDialogToPixels(wxSize(133, 43)), wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_record_panel->SetScrollbars(1, 1, 1, 1);
    m_record_main_sizer = new wxBoxSizer(wxHORIZONTAL);
    m_record_panel->SetSizer(m_record_main_sizer);

    wxBoxSizer* itemBoxSizer47 = new wxBoxSizer(wxVERTICAL);
    m_record_main_sizer->Add(itemBoxSizer47, 0, wxALIGN_TOP|wxALL, 5);
    m_record_start_stop_control = new wxToggleButton( m_record_panel, ID_RECORDTOGGLEBUTTON, _("Start"), wxDefaultPosition, wxDefaultSize, 0 );
    m_record_start_stop_control->SetValue(false);
    m_record_start_stop_control->SetHelpText(_("Start/ stop recording"));
    if (ShowToolTips())
        m_record_start_stop_control->SetToolTip(_("Start/ stop recording"));
    m_record_start_stop_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemBoxSizer47->Add(m_record_start_stop_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_record_max_buffers_check_box = new wxCheckBox( m_record_panel, ID_RECORD_MAX_BUFFERS_CHECKBOX, _("Max events"), wxDefaultPosition, wxDefaultSize, 0 );
    m_record_max_buffers_check_box->SetValue(false);
    m_record_max_buffers_check_box->SetHelpText(_("Check to record just a limited number of buffers"));
    if (ShowToolTips())
        m_record_max_buffers_check_box->SetToolTip(_("Check to record just a limited number of buffers"));
    m_record_max_buffers_check_box->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemBoxSizer47->Add(m_record_max_buffers_check_box, 0, wxALIGN_LEFT|wxALL, 5);

    m_record_max_buffers_control = new wxSpinCtrl( m_record_panel, ID_RECORD_MAX_BUFFERS_SPINCTRL, _T("1"), wxDefaultPosition, m_record_panel->ConvertDialogToPixels(wxSize(55, -1)), wxSP_ARROW_KEYS, 1, 99999999, 1 );
    m_record_max_buffers_control->SetHelpText(_("Set the maximum number of buffers to record"));
    if (ShowToolTips())
        m_record_max_buffers_control->SetToolTip(_("Set the maximum number of buffers to record"));
    m_record_max_buffers_control->Enable(false);
    itemBoxSizer47->Add(m_record_max_buffers_control, 0, wxALIGN_CENTER_HORIZONTAL|wxTOP, 1);

    wxStaticText* itemStaticText51 = new wxStaticText( m_record_panel, wxID_STATIC, _("Folder :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText51->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemBoxSizer47->Add(itemStaticText51, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    m_record_folder_sizer = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer47->Add(m_record_folder_sizer, 1, wxGROW|wxALL, 2);
    m_record_dir_control = new wxTextCtrl( m_record_panel, ID_RECORDDIRTEXTCTRL, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    m_record_dir_control->SetHelpText(_("Insert the folder where to store record files"));
    if (ShowToolTips())
        m_record_dir_control->SetToolTip(_("Insert the folder where to store record files"));
    m_record_folder_sizer->Add(m_record_dir_control, 1, wxALIGN_CENTER_VERTICAL|wxALL, 2);

    m_record_dir_browse_button = new wxButton( m_record_panel, ID_RECORDDIRBUTTON, _("..."), wxDefaultPosition, m_record_panel->ConvertDialogToPixels(wxSize(13, -1)), 0 );
    m_record_dir_browse_button->SetHelpText(_("Select a recording folder"));
    if (ShowToolTips())
        m_record_dir_browse_button->SetToolTip(_("Select a recording folder"));
    m_record_dir_browse_button->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    m_record_folder_sizer->Add(m_record_dir_browse_button, 0, wxALIGN_CENTER_VERTICAL|wxALL, 2);

    wxStaticBox* itemStaticBoxSizer55Static = new wxStaticBox(m_record_panel, wxID_ANY, _("Channels"));
    wxStaticBoxSizer* itemStaticBoxSizer55 = new wxStaticBoxSizer(itemStaticBoxSizer55Static, wxVERTICAL);
    m_record_main_sizer->Add(itemStaticBoxSizer55, 0, wxGROW|wxALL, 5);
    itemStaticBoxSizer55->Add(4, 1, 0, wxGROW|wxALL, 0);

    wxStaticText* itemStaticText57 = new wxStaticText( m_record_panel, wxID_STATIC, _("Enable :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText57->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer55->Add(itemStaticText57, 0, wxALIGN_RIGHT|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText58 = new wxStaticText( m_record_panel, wxID_STATIC, _("Rate divider :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText58->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer55->Add(itemStaticText58, 0, wxALIGN_RIGHT|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText59 = new wxStaticText( m_record_panel, wxID_STATIC, _("File format :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText59->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer55->Add(itemStaticText59, 0, wxALIGN_RIGHT|wxALL|wxADJUST_MINSIZE, 5);

    m_record_panel_HBoxSizer = new wxBoxSizer(wxHORIZONTAL);
    m_record_main_sizer->Add(m_record_panel_HBoxSizer, 1, wxGROW|wxALL, 5);

    m_record_panel->FitInside();
    m_common_settings_notebook->AddPage(m_record_panel, _("RECORD"));

    wxBoxSizer* itemBoxSizer61 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer61, 1, wxGROW|wxALL, 0);

    m_left_pane = new wxSashLayoutWindow( itemFrame1, ID_SASHLAYOUTWINDOW, wxDefaultPosition, itemFrame1->ConvertDialogToPixels(wxSize(250, 61)), wxSW_3DBORDER|wxSW_3DSASH|wxNO_BORDER );
    m_left_pane->SetSashVisible(wxSASH_RIGHT, true);
    m_left_pane->SetOrientation(wxLAYOUT_VERTICAL);
    m_left_pane->SetAlignment(wxLAYOUT_LEFT);
    m_left_pane->SetDefaultSize(itemFrame1->ConvertDialogToPixels(wxSize(250, 61)));
    m_left_pane->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Verdana")));
    itemBoxSizer61->Add(m_left_pane, 0, wxGROW|wxALL, 0);

    m_specific_settings_notebook = new wxNotebook( m_left_pane, ID_LEFT_NOTEBOOK, wxDefaultPosition, wxDefaultSize, wxNB_TOP );

    m_specific_settings_scope_1_notebook = new wxNotebook( m_specific_settings_notebook, ID_SCOPE_1_VIEW_NOTEBOOK, wxDefaultPosition, m_specific_settings_notebook->ConvertDialogToPixels(wxSize(150, -1)), wxNB_TOP );

    m_view_scope_1_panel = new wxScrolledWindow( m_specific_settings_scope_1_notebook, ID_VIEW_1_SCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_view_scope_1_panel->SetScrollbars(1, 1, 1, 1);
    m_view_1_main_sizer = new wxBoxSizer(wxVERTICAL);
    m_view_scope_1_panel->SetSizer(m_view_1_main_sizer);

    wxBoxSizer* itemBoxSizer67 = new wxBoxSizer(wxHORIZONTAL);
    m_view_1_main_sizer->Add(itemBoxSizer67, 0, wxALIGN_LEFT|wxALL, 5);
    wxStaticBox* itemStaticBoxSizer68Static = new wxStaticBox(m_view_scope_1_panel, wxID_ANY, _("Background"));
    wxStaticBoxSizer* itemStaticBoxSizer68 = new wxStaticBoxSizer(itemStaticBoxSizer68Static, wxHORIZONTAL);
    itemBoxSizer67->Add(itemStaticBoxSizer68, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 6);
    m_back_color_1_control = new wxPanel( m_view_scope_1_panel, ID_PANEL, wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(20, 9)), wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    itemStaticBoxSizer68->Add(m_back_color_1_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxButton* itemButton70 = new wxButton( m_view_scope_1_panel, ID_BACK_CHOOSE_COLOR_1_BUTTON, _("..."), wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(20, 12)), 0 );
    itemButton70->SetHelpText(_("Choose background color"));
    if (ShowToolTips())
        itemButton70->SetToolTip(_("Choose background color"));
    itemButton70->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer68->Add(itemButton70, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxStaticBox* itemStaticBoxSizer71Static = new wxStaticBox(m_view_scope_1_panel, wxID_ANY, _("Grid"));
    wxStaticBoxSizer* itemStaticBoxSizer71 = new wxStaticBoxSizer(itemStaticBoxSizer71Static, wxHORIZONTAL);
    itemBoxSizer67->Add(itemStaticBoxSizer71, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 6);
    m_grid_color_1_control = new wxPanel( m_view_scope_1_panel, ID_GRID_COLOR_1_PANEL, wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(20, 9)), wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    itemStaticBoxSizer71->Add(m_grid_color_1_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxButton* itemButton73 = new wxButton( m_view_scope_1_panel, ID_GRID_CHOOSE_COLOR_1_BUTTON, _("..."), wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(20, 12)), 0 );
    itemButton73->SetHelpText(_("Choose grid color"));
    if (ShowToolTips())
        itemButton73->SetToolTip(_("Choose grid color"));
    itemButton73->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer71->Add(itemButton73, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    m_grid_line_width_1_control = new wxSpinCtrl( m_view_scope_1_panel, ID_GRID_LINE_WIDTH_1_SPINCTRL, _T("1"), wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(30, -1)), wxSP_ARROW_KEYS, 1, 20, 1 );
    m_grid_line_width_1_control->SetHelpText(_("Set grid line width"));
    if (ShowToolTips())
        m_grid_line_width_1_control->SetToolTip(_("Set grid line width"));
    itemStaticBoxSizer71->Add(m_grid_line_width_1_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 1);

    wxString* m_grid_line_type_1_controlStrings = NULL;
    m_grid_line_type_1_control = new wxChoice( m_view_scope_1_panel, ID_GRID_LINE_TYPE_1_CHOICE, wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(60, -1)), 0, m_grid_line_type_1_controlStrings, 0 );
    m_grid_line_type_1_control->SetHelpText(_("Set grid line type"));
    if (ShowToolTips())
        m_grid_line_type_1_control->SetToolTip(_("Set grid line type"));
    m_grid_line_type_1_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer71->Add(m_grid_line_type_1_control, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 2);

    m_main_sizer_1_text = new wxStaticBox(m_view_scope_1_panel, wxID_ANY, _("Horizontal"));
    wxStaticBoxSizer* itemStaticBoxSizer76 = new wxStaticBoxSizer(m_main_sizer_1_text, wxHORIZONTAL);
    m_view_1_main_sizer->Add(itemStaticBoxSizer76, 0, wxGROW|wxALL, 6);
    wxString* m_sec_per_div_1_controlStrings = NULL;
    m_sec_per_div_1_control = new wxChoice( m_view_scope_1_panel, ID_SEC_PER_DIV_1_CHOICE, wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(70, -1)), 0, m_sec_per_div_1_controlStrings, 0 );
    m_sec_per_div_1_control->SetHelpText(_("Seconds per division"));
    if (ShowToolTips())
        m_sec_per_div_1_control->SetToolTip(_("Seconds per division"));
    m_sec_per_div_1_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer76->Add(m_sec_per_div_1_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    wxStaticBox* itemStaticBoxSizer78Static = new wxStaticBox(m_view_scope_1_panel, wxID_ANY, _T(""));
    wxStaticBoxSizer* itemStaticBoxSizer78 = new wxStaticBoxSizer(itemStaticBoxSizer78Static, wxVERTICAL);
    itemStaticBoxSizer76->Add(itemStaticBoxSizer78, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);
    wxBoxSizer* itemBoxSizer79 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer78->Add(itemBoxSizer79, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);
    m_offset_sec_reset_1_control = new wxButton( m_view_scope_1_panel, ID_OFFSET_SEC_RESET_1_BUTTON, _("0"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    m_offset_sec_reset_1_control->SetHelpText(_("Reset horizontal offset"));
    if (ShowToolTips())
        m_offset_sec_reset_1_control->SetToolTip(_("Reset horizontal offset"));
    m_offset_sec_reset_1_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemBoxSizer79->Add(m_offset_sec_reset_1_control, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 2);

    m_offset_sec_position_1_control = new wxSpinButton( m_view_scope_1_panel, ID_OFFSET_SEC_POSITION_1_SPINBUTTON, wxDefaultPosition, wxDefaultSize, wxSP_HORIZONTAL );
    m_offset_sec_position_1_control->SetHelpText(_("Set horizontal offset"));
    if (ShowToolTips())
        m_offset_sec_position_1_control->SetToolTip(_("Set horizontal offset"));
    itemBoxSizer79->Add(m_offset_sec_position_1_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 2);

    wxString* m_offset_sec_multiplier_1_controlStrings = NULL;
    m_offset_sec_multiplier_1_control = new wxChoice( m_view_scope_1_panel, ID_OFFSET_SEC_MULTIPLIER_1_CHOICE, wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(50, -1)), 0, m_offset_sec_multiplier_1_controlStrings, 0 );
    m_offset_sec_multiplier_1_control->SetHelpText(_("Set horizontal offset multiplier factor"));
    if (ShowToolTips())
        m_offset_sec_multiplier_1_control->SetToolTip(_("Set horizontal offset multiplier factor"));
    itemStaticBoxSizer78->Add(m_offset_sec_multiplier_1_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    m_offset_position_1_static = new wxStaticText( m_view_scope_1_panel, ID_OFFSET_SEC_VALUE_1_STATIC, _("0"), wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(60, -1)), 0 );
    m_offset_position_1_static->SetHelpText(_("Cursor position (uSec)"));
    if (ShowToolTips())
        m_offset_position_1_static->SetToolTip(_("Cursor position (uSec)"));
    m_offset_position_1_static->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemStaticBoxSizer76->Add(m_offset_position_1_static, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    wxStaticText* itemStaticText84 = new wxStaticText( m_view_scope_1_panel, wxID_STATIC, _("uS"), wxDefaultPosition, m_view_scope_1_panel->ConvertDialogToPixels(wxSize(20, -1)), 0 );
    itemStaticBoxSizer76->Add(itemStaticText84, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    m_view_1_channel_sizer = new wxStaticBox(m_view_scope_1_panel, wxID_ANY, _("Vertical"));
    wxStaticBoxSizer* itemStaticBoxSizer85 = new wxStaticBoxSizer(m_view_1_channel_sizer, wxVERTICAL);
    m_view_1_main_sizer->Add(itemStaticBoxSizer85, 1, wxGROW|wxALL, 5);
    m_view_1_panel_VBoxSizer = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer85->Add(m_view_1_panel_VBoxSizer, 1, wxGROW|wxALL, 5);

    m_view_scope_1_panel->FitInside();
    m_specific_settings_scope_1_notebook->AddPage(m_view_scope_1_panel, _("VIEW"));

    m_cursor_1_panel = new wxScrolledWindow( m_specific_settings_scope_1_notebook, ID_CURSOR_1_SCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_cursor_1_panel->SetScrollbars(1, 1, 1, 1);
    m_cursor_1_main_sizer = new wxBoxSizer(wxVERTICAL);
    m_cursor_1_panel->SetSizer(m_cursor_1_main_sizer);

    m_cursor_1_panel->FitInside();
    m_specific_settings_scope_1_notebook->AddPage(m_cursor_1_panel, _("CURSORS"));

    m_specific_settings_notebook->AddPage(m_specific_settings_scope_1_notebook, _("SCOPE 1"));

    m_specific_settings_scope_2_notebook = new wxNotebook( m_specific_settings_notebook, ID_SCOPE_2_VIEW_NOTEBOOK, wxDefaultPosition, m_specific_settings_notebook->ConvertDialogToPixels(wxSize(150, -1)), wxNB_TOP );

    m_view_scope_2_panel = new wxScrolledWindow( m_specific_settings_scope_2_notebook, ID_VIEW_2_SCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_view_scope_2_panel->SetScrollbars(1, 1, 1, 1);
    m_view_2_main_sizer = new wxBoxSizer(wxVERTICAL);
    m_view_scope_2_panel->SetSizer(m_view_2_main_sizer);

    wxBoxSizer* itemBoxSizer92 = new wxBoxSizer(wxHORIZONTAL);
    m_view_2_main_sizer->Add(itemBoxSizer92, 0, wxALIGN_LEFT|wxALL, 5);
    wxStaticBox* itemStaticBoxSizer93Static = new wxStaticBox(m_view_scope_2_panel, wxID_ANY, _("Background"));
    wxStaticBoxSizer* itemStaticBoxSizer93 = new wxStaticBoxSizer(itemStaticBoxSizer93Static, wxHORIZONTAL);
    itemBoxSizer92->Add(itemStaticBoxSizer93, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 6);
    m_back_color_2_control = new wxPanel( m_view_scope_2_panel, ID_PANEL6, wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(20, 9)), wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    itemStaticBoxSizer93->Add(m_back_color_2_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxButton* itemButton95 = new wxButton( m_view_scope_2_panel, ID_BACK_CHOOSE_COLOR_2_BUTTON, _("..."), wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(20, 12)), 0 );
    itemButton95->SetHelpText(_("Choose background color"));
    if (ShowToolTips())
        itemButton95->SetToolTip(_("Choose background color"));
    itemButton95->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer93->Add(itemButton95, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxStaticBox* itemStaticBoxSizer96Static = new wxStaticBox(m_view_scope_2_panel, wxID_ANY, _("Grid"));
    wxStaticBoxSizer* itemStaticBoxSizer96 = new wxStaticBoxSizer(itemStaticBoxSizer96Static, wxHORIZONTAL);
    itemBoxSizer92->Add(itemStaticBoxSizer96, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 6);
    m_grid_color_2_control = new wxPanel( m_view_scope_2_panel, ID_GRID_COLOR_2_PANEL, wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(20, 9)), wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    itemStaticBoxSizer96->Add(m_grid_color_2_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxButton* itemButton98 = new wxButton( m_view_scope_2_panel, ID_GRID_CHOOSE_COLOR_2_BUTTON, _("..."), wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(20, 12)), 0 );
    itemButton98->SetHelpText(_("Choose grid color"));
    if (ShowToolTips())
        itemButton98->SetToolTip(_("Choose grid color"));
    itemButton98->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer96->Add(itemButton98, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    m_grid_line_width_2_control = new wxSpinCtrl( m_view_scope_2_panel, ID_GRID_LINE_WIDTH_2_SPINCTRL, _T("1"), wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(30, -1)), wxSP_ARROW_KEYS, 1, 20, 1 );
    m_grid_line_width_2_control->SetHelpText(_("Set grid line width"));
    if (ShowToolTips())
        m_grid_line_width_2_control->SetToolTip(_("Set grid line width"));
    itemStaticBoxSizer96->Add(m_grid_line_width_2_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 1);

    wxString* m_grid_line_type_2_controlStrings = NULL;
    m_grid_line_type_2_control = new wxChoice( m_view_scope_2_panel, ID_GRID_LINE_TYPE_2_CHOICE, wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(60, -1)), 0, m_grid_line_type_2_controlStrings, 0 );
    m_grid_line_type_2_control->SetHelpText(_("Set grid line type"));
    if (ShowToolTips())
        m_grid_line_type_2_control->SetToolTip(_("Set grid line type"));
    m_grid_line_type_2_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer96->Add(m_grid_line_type_2_control, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 2);

    m_main_sizer_2_text = new wxStaticBox(m_view_scope_2_panel, wxID_ANY, _("Horizontal"));
    wxStaticBoxSizer* itemStaticBoxSizer101 = new wxStaticBoxSizer(m_main_sizer_2_text, wxHORIZONTAL);
    m_view_2_main_sizer->Add(itemStaticBoxSizer101, 0, wxGROW|wxALL, 6);
    wxString* m_sec_per_div_2_controlStrings = NULL;
    m_sec_per_div_2_control = new wxChoice( m_view_scope_2_panel, ID_SEC_PER_DIV_2_CHOICE, wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(70, -1)), 0, m_sec_per_div_2_controlStrings, 0 );
    m_sec_per_div_2_control->SetHelpText(_("Seconds per division"));
    if (ShowToolTips())
        m_sec_per_div_2_control->SetToolTip(_("Seconds per division"));
    m_sec_per_div_2_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer101->Add(m_sec_per_div_2_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    wxStaticBox* itemStaticBoxSizer103Static = new wxStaticBox(m_view_scope_2_panel, wxID_ANY, _T(""));
    wxStaticBoxSizer* itemStaticBoxSizer103 = new wxStaticBoxSizer(itemStaticBoxSizer103Static, wxVERTICAL);
    itemStaticBoxSizer101->Add(itemStaticBoxSizer103, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);
    wxBoxSizer* itemBoxSizer104 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer103->Add(itemBoxSizer104, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);
    m_offset_sec_reset_2_control = new wxButton( m_view_scope_2_panel, ID_OFFSET_SEC_RESET_2_BUTTON, _("0"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    m_offset_sec_reset_2_control->SetHelpText(_("Reset horizontal offset"));
    if (ShowToolTips())
        m_offset_sec_reset_2_control->SetToolTip(_("Reset horizontal offset"));
    m_offset_sec_reset_2_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemBoxSizer104->Add(m_offset_sec_reset_2_control, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 2);

    m_offset_sec_position_2_control = new wxSpinButton( m_view_scope_2_panel, ID_OFFSET_SEC_POSITION_2_SPINBUTTON, wxDefaultPosition, wxDefaultSize, wxSP_HORIZONTAL );
    m_offset_sec_position_2_control->SetHelpText(_("Set horizontal offset"));
    if (ShowToolTips())
        m_offset_sec_position_2_control->SetToolTip(_("Set horizontal offset"));
    itemBoxSizer104->Add(m_offset_sec_position_2_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 2);

    wxString* m_offset_sec_multiplier_2_controlStrings = NULL;
    m_offset_sec_multiplier_2_control = new wxChoice( m_view_scope_2_panel, ID_OFFSET_SEC_MULTIPLIER_2_CHOICE, wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(50, -1)), 0, m_offset_sec_multiplier_2_controlStrings, 0 );
    m_offset_sec_multiplier_2_control->SetHelpText(_("Set horizontal offset multiplier factor"));
    if (ShowToolTips())
        m_offset_sec_multiplier_2_control->SetToolTip(_("Set horizontal offset multiplier factor"));
    itemStaticBoxSizer103->Add(m_offset_sec_multiplier_2_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    m_offset_position_2_static = new wxStaticText( m_view_scope_2_panel, ID_OFFSET_SEC_VALUE_2_STATIC, _("0"), wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(60, -1)), 0 );
    m_offset_position_2_static->SetHelpText(_("Cursor position (uSec)"));
    if (ShowToolTips())
        m_offset_position_2_static->SetToolTip(_("Cursor position (uSec)"));
    m_offset_position_2_static->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemStaticBoxSizer101->Add(m_offset_position_2_static, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    wxStaticText* itemStaticText109 = new wxStaticText( m_view_scope_2_panel, wxID_STATIC, _("uS"), wxDefaultPosition, m_view_scope_2_panel->ConvertDialogToPixels(wxSize(20, -1)), 0 );
    itemStaticBoxSizer101->Add(itemStaticText109, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    m_view_2_channel_sizer = new wxStaticBox(m_view_scope_2_panel, wxID_ANY, _("Vertical"));
    wxStaticBoxSizer* itemStaticBoxSizer110 = new wxStaticBoxSizer(m_view_2_channel_sizer, wxVERTICAL);
    m_view_2_main_sizer->Add(itemStaticBoxSizer110, 1, wxGROW|wxALL, 5);
    m_view_2_panel_VBoxSizer = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer110->Add(m_view_2_panel_VBoxSizer, 1, wxGROW|wxALL, 5);

    m_view_scope_2_panel->FitInside();
    m_specific_settings_scope_2_notebook->AddPage(m_view_scope_2_panel, _("VIEW"));

    m_cursor_2_panel = new wxScrolledWindow( m_specific_settings_scope_2_notebook, ID_CURSOR_2_SCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_cursor_2_panel->SetScrollbars(1, 1, 1, 1);
    m_cursor_2_main_sizer = new wxBoxSizer(wxVERTICAL);
    m_cursor_2_panel->SetSizer(m_cursor_2_main_sizer);

    m_cursor_2_panel->FitInside();
    m_specific_settings_scope_2_notebook->AddPage(m_cursor_2_panel, _("CURSORS"));

    m_specific_settings_notebook->AddPage(m_specific_settings_scope_2_notebook, _("SCOPE 2"));

    m_specific_settings_scope_3_notebook = new wxNotebook( m_specific_settings_notebook, ID_SCOPE_3_VIEW_NOTEBOOK, wxDefaultPosition, m_specific_settings_notebook->ConvertDialogToPixels(wxSize(150, -1)), wxNB_TOP );

    m_view_scope_3_panel = new wxScrolledWindow( m_specific_settings_scope_3_notebook, ID_VIEW_3_SCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_view_scope_3_panel->SetScrollbars(1, 1, 1, 1);
    m_view_3_main_sizer = new wxBoxSizer(wxVERTICAL);
    m_view_scope_3_panel->SetSizer(m_view_3_main_sizer);

    wxBoxSizer* itemBoxSizer117 = new wxBoxSizer(wxHORIZONTAL);
    m_view_3_main_sizer->Add(itemBoxSizer117, 0, wxALIGN_LEFT|wxALL, 5);
    wxStaticBox* itemStaticBoxSizer118Static = new wxStaticBox(m_view_scope_3_panel, wxID_ANY, _("Background"));
    wxStaticBoxSizer* itemStaticBoxSizer118 = new wxStaticBoxSizer(itemStaticBoxSizer118Static, wxHORIZONTAL);
    itemBoxSizer117->Add(itemStaticBoxSizer118, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 6);
    m_back_color_3_control = new wxPanel( m_view_scope_3_panel, ID_PANEL3, wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(20, 9)), wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    itemStaticBoxSizer118->Add(m_back_color_3_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxButton* itemButton120 = new wxButton( m_view_scope_3_panel, ID_BACK_CHOOSE_COLOR_3_BUTTON, _("..."), wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(20, 12)), 0 );
    itemButton120->SetHelpText(_("Choose background color"));
    if (ShowToolTips())
        itemButton120->SetToolTip(_("Choose background color"));
    itemButton120->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer118->Add(itemButton120, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxStaticBox* itemStaticBoxSizer121Static = new wxStaticBox(m_view_scope_3_panel, wxID_ANY, _("Grid"));
    wxStaticBoxSizer* itemStaticBoxSizer121 = new wxStaticBoxSizer(itemStaticBoxSizer121Static, wxHORIZONTAL);
    itemBoxSizer117->Add(itemStaticBoxSizer121, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 6);
    m_grid_color_3_control = new wxPanel( m_view_scope_3_panel, ID_GRID_COLOR_3_PANEL, wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(20, 9)), wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    itemStaticBoxSizer121->Add(m_grid_color_3_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxButton* itemButton123 = new wxButton( m_view_scope_3_panel, ID_GRID_CHOOSE_COLOR_3_BUTTON, _("..."), wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(20, 12)), 0 );
    itemButton123->SetHelpText(_("Choose grid color"));
    if (ShowToolTips())
        itemButton123->SetToolTip(_("Choose grid color"));
    itemButton123->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer121->Add(itemButton123, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    m_grid_line_width_3_control = new wxSpinCtrl( m_view_scope_3_panel, ID_GRID_LINE_WIDTH_3_SPINCTRL, _T("1"), wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(30, -1)), wxSP_ARROW_KEYS, 1, 20, 1 );
    m_grid_line_width_3_control->SetHelpText(_("Set grid line width"));
    if (ShowToolTips())
        m_grid_line_width_3_control->SetToolTip(_("Set grid line width"));
    itemStaticBoxSizer121->Add(m_grid_line_width_3_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 1);

    wxString* m_grid_line_type_3_controlStrings = NULL;
    m_grid_line_type_3_control = new wxChoice( m_view_scope_3_panel, ID_GRID_LINE_TYPE_3_CHOICE, wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(60, -1)), 0, m_grid_line_type_3_controlStrings, 0 );
    m_grid_line_type_3_control->SetHelpText(_("Set grid line type"));
    if (ShowToolTips())
        m_grid_line_type_3_control->SetToolTip(_("Set grid line type"));
    m_grid_line_type_3_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer121->Add(m_grid_line_type_3_control, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 2);

    m_main_sizer_3_text = new wxStaticBox(m_view_scope_3_panel, wxID_ANY, _("Horizontal"));
    wxStaticBoxSizer* itemStaticBoxSizer126 = new wxStaticBoxSizer(m_main_sizer_3_text, wxHORIZONTAL);
    m_view_3_main_sizer->Add(itemStaticBoxSizer126, 0, wxGROW|wxALL, 6);
    wxString* m_sec_per_div_3_controlStrings = NULL;
    m_sec_per_div_3_control = new wxChoice( m_view_scope_3_panel, ID_SEC_PER_DIV_3_CHOICE, wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(70, -1)), 0, m_sec_per_div_3_controlStrings, 0 );
    m_sec_per_div_3_control->SetHelpText(_("Seconds per division"));
    if (ShowToolTips())
        m_sec_per_div_3_control->SetToolTip(_("Seconds per division"));
    m_sec_per_div_3_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer126->Add(m_sec_per_div_3_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    wxStaticBox* itemStaticBoxSizer128Static = new wxStaticBox(m_view_scope_3_panel, wxID_ANY, _T(""));
    wxStaticBoxSizer* itemStaticBoxSizer128 = new wxStaticBoxSizer(itemStaticBoxSizer128Static, wxVERTICAL);
    itemStaticBoxSizer126->Add(itemStaticBoxSizer128, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);
    wxBoxSizer* itemBoxSizer129 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer128->Add(itemBoxSizer129, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);
    m_offset_sec_reset_3_control = new wxButton( m_view_scope_3_panel, ID_OFFSET_SEC_RESET_3_BUTTON, _("0"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    m_offset_sec_reset_3_control->SetHelpText(_("Reset horizontal offset"));
    if (ShowToolTips())
        m_offset_sec_reset_3_control->SetToolTip(_("Reset horizontal offset"));
    m_offset_sec_reset_3_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemBoxSizer129->Add(m_offset_sec_reset_3_control, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 2);

    m_offset_sec_position_3_control = new wxSpinButton( m_view_scope_3_panel, ID_OFFSET_SEC_POSITION_3_SPINBUTTON, wxDefaultPosition, wxDefaultSize, wxSP_HORIZONTAL );
    m_offset_sec_position_3_control->SetHelpText(_("Set horizontal offset"));
    if (ShowToolTips())
        m_offset_sec_position_3_control->SetToolTip(_("Set horizontal offset"));
    itemBoxSizer129->Add(m_offset_sec_position_3_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 2);

    wxString* m_offset_sec_multiplier_3_controlStrings = NULL;
    m_offset_sec_multiplier_3_control = new wxChoice( m_view_scope_3_panel, ID_OFFSET_SEC_MULTIPLIER_3_CHOICE, wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(50, -1)), 0, m_offset_sec_multiplier_3_controlStrings, 0 );
    m_offset_sec_multiplier_3_control->SetHelpText(_("Set horizontal offset multiplier factor"));
    if (ShowToolTips())
        m_offset_sec_multiplier_3_control->SetToolTip(_("Set horizontal offset multiplier factor"));
    itemStaticBoxSizer128->Add(m_offset_sec_multiplier_3_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    m_offset_position_3_static = new wxStaticText( m_view_scope_3_panel, ID_OFFSET_SEC_VALUE_3_STATIC, _("0"), wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(60, -1)), 0 );
    m_offset_position_3_static->SetHelpText(_("Cursor position (uSec)"));
    if (ShowToolTips())
        m_offset_position_3_static->SetToolTip(_("Cursor position (uSec)"));
    m_offset_position_3_static->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemStaticBoxSizer126->Add(m_offset_position_3_static, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    wxStaticText* itemStaticText134 = new wxStaticText( m_view_scope_3_panel, wxID_STATIC, _("uS"), wxDefaultPosition, m_view_scope_3_panel->ConvertDialogToPixels(wxSize(20, -1)), 0 );
    itemStaticBoxSizer126->Add(itemStaticText134, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    m_view_3_channel_sizer = new wxStaticBox(m_view_scope_3_panel, wxID_ANY, _("Vertical"));
    wxStaticBoxSizer* itemStaticBoxSizer135 = new wxStaticBoxSizer(m_view_3_channel_sizer, wxVERTICAL);
    m_view_3_main_sizer->Add(itemStaticBoxSizer135, 1, wxGROW|wxALL, 5);
    m_view_3_panel_VBoxSizer = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer135->Add(m_view_3_panel_VBoxSizer, 1, wxGROW|wxALL, 5);

    m_view_scope_3_panel->FitInside();
    m_specific_settings_scope_3_notebook->AddPage(m_view_scope_3_panel, _("VIEW"));

    m_cursor_3_panel = new wxScrolledWindow( m_specific_settings_scope_3_notebook, ID_CURSOR_3_SCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_cursor_3_panel->SetScrollbars(1, 1, 1, 1);
    m_cursor_3_main_sizer = new wxBoxSizer(wxVERTICAL);
    m_cursor_3_panel->SetSizer(m_cursor_3_main_sizer);

    m_cursor_3_panel->FitInside();
    m_specific_settings_scope_3_notebook->AddPage(m_cursor_3_panel, _("CURSORS"));

    m_specific_settings_notebook->AddPage(m_specific_settings_scope_3_notebook, _("SCOPE 3"));

    m_specific_settings_scope_4_notebook = new wxNotebook( m_specific_settings_notebook, ID_SCOPE_4_VIEW_NOTEBOOK, wxDefaultPosition, m_specific_settings_notebook->ConvertDialogToPixels(wxSize(150, -1)), wxNB_TOP );

    m_view_scope_4_panel = new wxScrolledWindow( m_specific_settings_scope_4_notebook, ID_VIEW_4_SCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_view_scope_4_panel->SetScrollbars(1, 1, 1, 1);
    m_view_4_main_sizer = new wxBoxSizer(wxVERTICAL);
    m_view_scope_4_panel->SetSizer(m_view_4_main_sizer);

    wxBoxSizer* itemBoxSizer142 = new wxBoxSizer(wxHORIZONTAL);
    m_view_4_main_sizer->Add(itemBoxSizer142, 0, wxALIGN_LEFT|wxALL, 5);
    wxStaticBox* itemStaticBoxSizer143Static = new wxStaticBox(m_view_scope_4_panel, wxID_ANY, _("Background"));
    wxStaticBoxSizer* itemStaticBoxSizer143 = new wxStaticBoxSizer(itemStaticBoxSizer143Static, wxHORIZONTAL);
    itemBoxSizer142->Add(itemStaticBoxSizer143, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 6);
    m_back_color_4_control = new wxPanel( m_view_scope_4_panel, ID_PANEL5, wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(20, 9)), wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    itemStaticBoxSizer143->Add(m_back_color_4_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxButton* itemButton145 = new wxButton( m_view_scope_4_panel, ID_BACK_CHOOSE_COLOR_4_BUTTON, _("..."), wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(20, 12)), 0 );
    itemButton145->SetHelpText(_("Choose background color"));
    if (ShowToolTips())
        itemButton145->SetToolTip(_("Choose background color"));
    itemButton145->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer143->Add(itemButton145, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxStaticBox* itemStaticBoxSizer146Static = new wxStaticBox(m_view_scope_4_panel, wxID_ANY, _("Grid"));
    wxStaticBoxSizer* itemStaticBoxSizer146 = new wxStaticBoxSizer(itemStaticBoxSizer146Static, wxHORIZONTAL);
    itemBoxSizer142->Add(itemStaticBoxSizer146, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 6);
    m_grid_color_4_control = new wxPanel( m_view_scope_4_panel, ID_GRID_COLOR_4_PANEL, wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(20, 9)), wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    itemStaticBoxSizer146->Add(m_grid_color_4_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    wxButton* itemButton148 = new wxButton( m_view_scope_4_panel, ID_GRID_CHOOSE_COLOR_4_BUTTON, _("..."), wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(20, 12)), 0 );
    itemButton148->SetHelpText(_("Choose grid color"));
    if (ShowToolTips())
        itemButton148->SetToolTip(_("Choose grid color"));
    itemButton148->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer146->Add(itemButton148, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);

    m_grid_line_width_4_control = new wxSpinCtrl( m_view_scope_4_panel, ID_GRID_LINE_WIDTH_4_SPINCTRL, _T("1"), wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(30, -1)), wxSP_ARROW_KEYS, 1, 20, 1 );
    m_grid_line_width_4_control->SetHelpText(_("Set grid line width"));
    if (ShowToolTips())
        m_grid_line_width_4_control->SetToolTip(_("Set grid line width"));
    itemStaticBoxSizer146->Add(m_grid_line_width_4_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 1);

    wxString* m_grid_line_type_4_controlStrings = NULL;
    m_grid_line_type_4_control = new wxChoice( m_view_scope_4_panel, ID_GRID_LINE_TYPE_4_CHOICE, wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(60, -1)), 0, m_grid_line_type_4_controlStrings, 0 );
    m_grid_line_type_4_control->SetHelpText(_("Set grid line type"));
    if (ShowToolTips())
        m_grid_line_type_4_control->SetToolTip(_("Set grid line type"));
    m_grid_line_type_4_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer146->Add(m_grid_line_type_4_control, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 2);

    m_main_sizer_4_text = new wxStaticBox(m_view_scope_4_panel, wxID_ANY, _("Horizontal"));
    wxStaticBoxSizer* itemStaticBoxSizer151 = new wxStaticBoxSizer(m_main_sizer_4_text, wxHORIZONTAL);
    m_view_4_main_sizer->Add(itemStaticBoxSizer151, 0, wxGROW|wxALL, 6);
    wxString* m_sec_per_div_4_controlStrings = NULL;
    m_sec_per_div_4_control = new wxChoice( m_view_scope_4_panel, ID_SEC_PER_DIV_4_CHOICE, wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(70, -1)), 0, m_sec_per_div_4_controlStrings, 0 );
    m_sec_per_div_4_control->SetHelpText(_("Seconds per division"));
    if (ShowToolTips())
        m_sec_per_div_4_control->SetToolTip(_("Seconds per division"));
    m_sec_per_div_4_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer151->Add(m_sec_per_div_4_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    wxStaticBox* itemStaticBoxSizer153Static = new wxStaticBox(m_view_scope_4_panel, wxID_ANY, _T(""));
    wxStaticBoxSizer* itemStaticBoxSizer153 = new wxStaticBoxSizer(itemStaticBoxSizer153Static, wxVERTICAL);
    itemStaticBoxSizer151->Add(itemStaticBoxSizer153, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);
    wxBoxSizer* itemBoxSizer154 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer153->Add(itemBoxSizer154, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);
    m_offset_sec_reset_4_control = new wxButton( m_view_scope_4_panel, ID_OFFSET_SEC_RESET_4_BUTTON, _("0"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    m_offset_sec_reset_4_control->SetHelpText(_("Reset horizontal offset"));
    if (ShowToolTips())
        m_offset_sec_reset_4_control->SetToolTip(_("Reset horizontal offset"));
    m_offset_sec_reset_4_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemBoxSizer154->Add(m_offset_sec_reset_4_control, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 2);

    m_offset_sec_position_4_control = new wxSpinButton( m_view_scope_4_panel, ID_OFFSET_SEC_POSITION_4_SPINBUTTON, wxDefaultPosition, wxDefaultSize, wxSP_HORIZONTAL );
    m_offset_sec_position_4_control->SetHelpText(_("Set horizontal offset"));
    if (ShowToolTips())
        m_offset_sec_position_4_control->SetToolTip(_("Set horizontal offset"));
    itemBoxSizer154->Add(m_offset_sec_position_4_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 2);

    wxString* m_offset_sec_multiplier_4_controlStrings = NULL;
    m_offset_sec_multiplier_4_control = new wxChoice( m_view_scope_4_panel, ID_OFFSET_SEC_MULTIPLIER_4_CHOICE, wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(50, -1)), 0, m_offset_sec_multiplier_4_controlStrings, 0 );
    m_offset_sec_multiplier_4_control->SetHelpText(_("Set horizontal offset multiplier factor"));
    if (ShowToolTips())
        m_offset_sec_multiplier_4_control->SetToolTip(_("Set horizontal offset multiplier factor"));
    itemStaticBoxSizer153->Add(m_offset_sec_multiplier_4_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    m_offset_position_4_static = new wxStaticText( m_view_scope_4_panel, ID_OFFSET_SEC_VALUE_4_STATIC, _("0"), wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(60, -1)), 0 );
    m_offset_position_4_static->SetHelpText(_("Cursor position (uSec)"));
    if (ShowToolTips())
        m_offset_position_4_static->SetToolTip(_("Cursor position (uSec)"));
    m_offset_position_4_static->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemStaticBoxSizer151->Add(m_offset_position_4_static, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    wxStaticText* itemStaticText159 = new wxStaticText( m_view_scope_4_panel, wxID_STATIC, _("uS"), wxDefaultPosition, m_view_scope_4_panel->ConvertDialogToPixels(wxSize(20, -1)), 0 );
    itemStaticBoxSizer151->Add(itemStaticText159, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    m_view_4_channel_sizer = new wxStaticBox(m_view_scope_4_panel, wxID_ANY, _("Vertical"));
    wxStaticBoxSizer* itemStaticBoxSizer160 = new wxStaticBoxSizer(m_view_4_channel_sizer, wxVERTICAL);
    m_view_4_main_sizer->Add(itemStaticBoxSizer160, 1, wxGROW|wxALL, 5);
    m_view_4_panel_VBoxSizer = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer160->Add(m_view_4_panel_VBoxSizer, 1, wxGROW|wxALL, 5);

    m_view_scope_4_panel->FitInside();
    m_specific_settings_scope_4_notebook->AddPage(m_view_scope_4_panel, _("VIEW"));

    m_cursor_4_panel = new wxScrolledWindow( m_specific_settings_scope_4_notebook, ID_CURSOR_4_SCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_cursor_4_panel->SetScrollbars(1, 1, 1, 1);
    m_cursor_4_main_sizer = new wxBoxSizer(wxVERTICAL);
    m_cursor_4_panel->SetSizer(m_cursor_4_main_sizer);

    m_cursor_4_panel->FitInside();
    m_specific_settings_scope_4_notebook->AddPage(m_cursor_4_panel, _("CURSORS"));

    m_specific_settings_notebook->AddPage(m_specific_settings_scope_4_notebook, _("SCOPE 4"));

    m_top_pane = new wxSashLayoutWindow( itemFrame1, ID_SASHLAYOUTWINDOW1, wxDefaultPosition, itemFrame1->ConvertDialogToPixels(wxSize(200, 184)), wxSW_3DBORDER|wxSW_3DSASH|wxNO_BORDER );
    m_top_pane->SetOrientation(wxLAYOUT_HORIZONTAL);
    m_top_pane->SetAlignment(wxLAYOUT_TOP);
    m_top_pane->SetDefaultSize(itemFrame1->ConvertDialogToPixels(wxSize(200, 184)));
    m_top_pane->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Verdana")));
    itemBoxSizer61->Add(m_top_pane, 1, wxGROW|wxALL, 0);

    m_scope_notebook = new wxNotebook( m_top_pane, ID_SCOPE_NOTEBOOK, wxDefaultPosition, wxDefaultSize, wxNB_TOP );

    m_scope_horiz_splitter = new wxSplitterWindow( m_scope_notebook, ID_SCOPE_HORIZ_SPLITTERWINDOW, wxDefaultPosition, m_scope_notebook->ConvertDialogToPixels(wxSize(100, 100)), wxSP_3DBORDER|wxSP_3DSASH|wxSP_PERMIT_UNSPLIT|wxNO_BORDER );
    m_scope_horiz_splitter->SetMinimumPaneSize(50);
    m_scope_notebook->AddPage(m_scope_horiz_splitter, _("SCOPE"));

    m_main_toolbar = CreateToolBar( wxTB_FLAT|wxTB_HORIZONTAL|wxTB_TEXT|wxWANTS_CHARS, ID_MAIN_TOOLBAR );
    m_main_toolbar->SetToolBitmapSize(wxSize(34, 34));
    wxBitmap itemtool168Bitmap(itemFrame1->GetBitmapResource(wxT("exit_34.png")));
    wxBitmap itemtool168BitmapDisabled;
    m_main_toolbar->AddTool(ID_EXIT_TOOL, _("Exit"), itemtool168Bitmap, itemtool168BitmapDisabled, wxITEM_NORMAL, _("Close application and exit to system."), _("Close application and exit to system."));
    wxBitmap itemtool169Bitmap(itemFrame1->GetBitmapResource(wxT("connect.png")));
    wxBitmap itemtool169BitmapDisabled;
    m_main_toolbar->AddTool(ID_CONNECT_TOOL, _("Connect"), itemtool169Bitmap, itemtool169BitmapDisabled, wxITEM_CHECK, _("Connect / disconnect from he board."), _("Connect / disconnect from he board."));
    m_main_toolbar->AddSeparator();
    wxBitmap itemtool171Bitmap(itemFrame1->GetBitmapResource(wxT("view_left_34.PNG")));
    wxBitmap itemtool171BitmapDisabled;
    m_main_toolbar->AddTool(ID_VIEW_LEFT_TOOL, _("Left"), itemtool171Bitmap, itemtool171BitmapDisabled, wxITEM_CHECK, _("Show/Hide left pane"), _("Show/Hide left pane"));
    wxBitmap itemtool172Bitmap(itemFrame1->GetBitmapResource(wxT("view_bottom_34.PNG")));
    wxBitmap itemtool172BitmapDisabled;
    m_main_toolbar->AddTool(ID_VIEW_BOTTOM_TOOL, _("Bottom"), itemtool172Bitmap, itemtool172BitmapDisabled, wxITEM_CHECK, _("Show/Hide bottom pane"), _("Show/Hide bottom pane"));
    m_main_toolbar->AddSeparator();
    wxBitmap itemtool174Bitmap(itemFrame1->GetBitmapResource(wxT("scope_lt.png")));
    wxBitmap itemtool174BitmapDisabled;
    m_main_toolbar->AddTool(ID_VIEW_SCOPE_LEFT_TOP_TOOL, _("Scope 1"), itemtool174Bitmap, itemtool174BitmapDisabled, wxITEM_CHECK, _("Show/Hide scope left top pane"), _("Show/Hide scope left top pane"));
    wxBitmap itemtool175Bitmap(itemFrame1->GetBitmapResource(wxT("scope_rt.png")));
    wxBitmap itemtool175BitmapDisabled;
    m_main_toolbar->AddTool(ID_VIEW_SCOPE_RIGHT_TOP_TOOL, _("Scope 2"), itemtool175Bitmap, itemtool175BitmapDisabled, wxITEM_CHECK, _("Show/Hide scope right top pane"), _("Show/Hide scope right top pane"));
    wxBitmap itemtool176Bitmap(itemFrame1->GetBitmapResource(wxT("scope_lb.png")));
    wxBitmap itemtool176BitmapDisabled;
    m_main_toolbar->AddTool(ID_VIEW_SCOPE_LEFT_BOTTOM_TOOL, _("Scope 3"), itemtool176Bitmap, itemtool176BitmapDisabled, wxITEM_CHECK, _("Show/Hide scope left bottom pane"), _("Show/Hide scope left bottom pane"));
    wxBitmap itemtool177Bitmap(itemFrame1->GetBitmapResource(wxT("scope_rb.png")));
    wxBitmap itemtool177BitmapDisabled;
    m_main_toolbar->AddTool(ID_VIEW_SCOPE_RIGHT_BOTTOM_TOOL, _("Scope 4"), itemtool177Bitmap, itemtool177BitmapDisabled, wxITEM_CHECK, _("Show/Hide scope right bottom pane"), _("Show/Hide scope right bottom pane"));
    m_main_toolbar->AddSeparator();
    wxBitmap itemtool179Bitmap(itemFrame1->GetBitmapResource(wxT("about_34.png")));
    wxBitmap itemtool179BitmapDisabled;
    m_main_toolbar->AddTool(ID_HELP_TOOL, _("About"), itemtool179Bitmap, itemtool179BitmapDisabled, wxITEM_NORMAL, _("About CAEN scope"), _("About CAEN scope"));
    m_main_toolbar->Realize();
    itemFrame1->SetToolBar(m_main_toolbar);

    m_main_statusbar = new wxStatusBar( itemFrame1, ID_MAIN_STATUSBAR, wxST_SIZEGRIP );
    m_main_statusbar->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    m_main_statusbar->SetFieldsCount(9);
    int m_main_statusbarWidths[9];
    m_main_statusbarWidths[0] = -1;
    m_main_statusbarWidths[1] = 330;
    m_main_statusbarWidths[2] = 80;
    m_main_statusbarWidths[3] = 80;
    m_main_statusbarWidths[4] = 80;
    m_main_statusbarWidths[5] = 80;
    m_main_statusbarWidths[6] = 80;
    m_main_statusbarWidths[7] = 120;
    m_main_statusbarWidths[8] = 60;
    m_main_statusbar->SetStatusWidths(9, m_main_statusbarWidths);
    itemFrame1->SetStatusBar(m_main_statusbar);

    // Connect events and objects
    m_scope_horiz_splitter->Connect(ID_SCOPE_HORIZ_SPLITTERWINDOW, wxEVT_SIZE, wxSizeEventHandler(MainFrame::OnSize), NULL, this);
	////@end MainFrame content construction

	this->m_ch_DAC_control->SetRange( -0x8000, 0x7fff);

	// Connect events and objects
    m_scope_horiz_splitter->Connect(ID_SCOPE_HORIZ_SPLITTERWINDOW, wxEVT_SIZE, wxSizeEventHandler(MainFrame::OnSize), NULL, this);

	// Show Toolbar logo
	m_main_toolbar->PushEventHandler( new wxBackgroundBitmap( wxBitmap(AppSettings::get_default_path()+ _T("caen.png"), wxBITMAP_TYPE_PNG), this));

	MainFrame::g_main_statusbar= this->m_main_statusbar;

	MainFrame::g_samples_ready_control= this->m_samples_ready_control;
	//
	// Scope Notebook panel

	this->m_scope_vert_splitter_top = new wxSplitterWindow( this->m_scope_horiz_splitter, ID_SCOPE_VERT_TOP_SPLITTERWINDOW, wxDefaultPosition, this->m_scope_horiz_splitter->ConvertDialogToPixels(wxSize(100, 100)), wxSP_3DBORDER|wxSP_3DSASH|wxSP_PERMIT_UNSPLIT|wxNO_BORDER );
	this->m_scope_vert_splitter_top->SetMinimumPaneSize( 50);

	this->m_scope_vert_splitter_bottom = new wxSplitterWindow( this->m_scope_horiz_splitter, ID_SCOPE_VERT_BOTTOM_SPLITTERWINDOW, wxDefaultPosition, this->m_scope_horiz_splitter->ConvertDialogToPixels(wxSize(100, 100)), wxSP_3DBORDER|wxSP_3DSASH|wxSP_PERMIT_UNSPLIT|wxNO_BORDER );
	this->m_scope_vert_splitter_bottom->SetMinimumPaneSize( 50);

	int i;
	for( i= 0; i< SCOPE_NUM_PANELS/ 2; i++)
	{
		this->m_scope_panel_array[ i] = new DrawingPanel( i, this->m_scope_vert_splitter_top, ID_DRAWING_PANEL+ 1000+ i, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
		MainFrame::g_scope_panel_array[ i]= this->m_scope_panel_array[ i];
	}
	for( ; i< SCOPE_NUM_PANELS; i++)
	{
		this->m_scope_panel_array[ i] = new DrawingPanel( i, this->m_scope_vert_splitter_bottom, ID_DRAWING_PANEL+ 1000+ i, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
		MainFrame::g_scope_panel_array[ i]= this->m_scope_panel_array[ i];
	}

	this->m_scope_vert_splitter_top->SetSashGravity( 0.5);
	this->m_scope_vert_splitter_bottom->SetSashGravity( 0.5);
	this->m_scope_horiz_splitter->SetSashGravity( 0.5);

	//
	// Grid line type items
	this->m_grid_line_type_1_control->Append( _("NO GRID"));
	this->m_grid_line_type_1_control->Append( _("SOLID"));
	this->m_grid_line_type_1_control->Append( _("DASHED"));
	this->m_grid_line_type_1_control->Append( _("DASH-DOT"));
	this->m_grid_line_type_1_control->Append( _("DOTTED"));

	this->m_grid_line_type_1_control->SetSelection( 0);

	this->m_grid_line_type_2_control->Append( _("NO GRID"));
	this->m_grid_line_type_2_control->Append( _("SOLID"));
	this->m_grid_line_type_2_control->Append( _("DASHED"));
	this->m_grid_line_type_2_control->Append( _("DASH-DOT"));
	this->m_grid_line_type_2_control->Append( _("DOTTED"));

	this->m_grid_line_type_2_control->SetSelection( 0);

	this->m_grid_line_type_3_control->Append( _("NO GRID"));
	this->m_grid_line_type_3_control->Append( _("SOLID"));
	this->m_grid_line_type_3_control->Append( _("DASHED"));
	this->m_grid_line_type_3_control->Append( _("DASH-DOT"));
	this->m_grid_line_type_3_control->Append( _("DOTTED"));

	this->m_grid_line_type_3_control->SetSelection( 0);

	this->m_grid_line_type_4_control->Append( _("NO GRID"));
	this->m_grid_line_type_4_control->Append( _("SOLID"));
	this->m_grid_line_type_4_control->Append( _("DASHED"));
	this->m_grid_line_type_4_control->Append( _("DASH-DOT"));
	this->m_grid_line_type_4_control->Append( _("DOTTED"));

	this->m_grid_line_type_4_control->SetSelection( 0);

	////
	//// External clock values
	//this->m_ext_clock_control->Append( _("10   MHz"));
	//this->m_ext_clock_control->Append( _("40   MHz"));
	//this->m_ext_clock_control->Append( _("50   MHz"));
	//this->m_ext_clock_control->Append( _("62.5 MHz"));

	//this->m_ext_clock_control->SetSelection( 0);

	//
	// Sample block size 
	for( int i= 0; ; i++)
	{
		wxChoice *ctrl= (wxChoice *)0;
		switch( i)
		{
		case 0:
			ctrl= this->m_sec_per_div_1_control;
			break;
		case 1:
			ctrl= this->m_sec_per_div_2_control;
			break;
		case 2:
			ctrl= this->m_sec_per_div_3_control;
			break;
		case 3:
			ctrl= this->m_sec_per_div_4_control;
			break;
		}
		if( ctrl== (wxChoice *)0)
			break;
		ctrl->Append( _("  1 nS/Div"));
		ctrl->Append( _("  2 nS/Div"));
		ctrl->Append( _("  4 nS/Div"));

		ctrl->Append( _(" 10 nS/Div"));
		ctrl->Append( _(" 20 nS/Div"));
		ctrl->Append( _(" 40 nS/Div"));

		ctrl->Append( _("100 nS/Div"));
		ctrl->Append( _("200 nS/Div"));
		ctrl->Append( _("400 nS/Div"));

		ctrl->Append( _("  1 uS/Div"));
		ctrl->Append( _("  2 uS/Div"));
		ctrl->Append( _("  4 uS/Div"));

		ctrl->Append( _(" 10 uS/Div"));
		ctrl->Append( _(" 20 uS/Div"));
		ctrl->Append( _(" 40 uS/Div"));

		ctrl->Append( _("100 uS/Div"));
		ctrl->Append( _("200 uS/Div"));
		ctrl->Append( _("400 uS/Div"));

		ctrl->Append( _("  1 mS/Div"));
		ctrl->Append( _("  2 mS/Div"));
		ctrl->Append( _("  4 mS/Div"));

		ctrl->Append( _(" 10 mS/Div"));
		ctrl->Append( _(" 20 mS/Div"));
		ctrl->Append( _(" 40 mS/Div"));

		ctrl->SetSelection( 0);
	}

	this->m_trigger_edge_control->Append( _("NO TRIG"));
	this->m_trigger_edge_control->Append( _("RISING"));
	this->m_trigger_edge_control->Append( _("FALLING"));

	//
	// Cursor controls
	m_cursor_ch_ctrl[0]= new CursorChControl( 0, &m_app_settings->m_mutex, this->m_cursor_1_panel);
	this->m_cursor_1_main_sizer->Add( m_cursor_ch_ctrl[0], 0, wxGROW|wxALL, 1);
	m_cursor_ch_ctrl[1]= new CursorChControl( 1, &m_app_settings->m_mutex, this->m_cursor_2_panel);
	this->m_cursor_2_main_sizer->Add( m_cursor_ch_ctrl[1], 0, wxGROW|wxALL, 1);
	m_cursor_ch_ctrl[2]= new CursorChControl( 2, &m_app_settings->m_mutex, this->m_cursor_3_panel);
	this->m_cursor_3_main_sizer->Add( m_cursor_ch_ctrl[2], 0, wxGROW|wxALL, 1);
	m_cursor_ch_ctrl[3]= new CursorChControl( 3, &m_app_settings->m_mutex, this->m_cursor_4_panel);
	this->m_cursor_4_main_sizer->Add( m_cursor_ch_ctrl[3], 0, wxGROW|wxALL, 1);
}

/*!
* Should we show tooltips?
*/

bool MainFrame::ShowToolTips()
{
	return true;
}

/*!
* Get bitmap resources
*/

wxBitmap MainFrame::GetBitmapResource( const wxString& name )
{
	// Bitmap retrieval
	////@begin MainFrame bitmap retrieval
    wxUnusedVar(name);
    if (name == _T("exit_34.png"))
    {
        wxBitmap bitmap(AppSettings::get_default_path()+_T("exit_34.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("connect.png"))
    {
        wxBitmap bitmap(AppSettings::get_default_path()+_T("connect.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("view_left_34.PNG"))
    {
        wxBitmap bitmap(AppSettings::get_default_path()+_T("view_left_34.PNG"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("view_bottom_34.PNG"))
    {
        wxBitmap bitmap(AppSettings::get_default_path()+_T("view_bottom_34.PNG"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("scope_lt.png"))
    {
        wxBitmap bitmap(AppSettings::get_default_path()+_T("scope_lt.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("scope_rt.png"))
    {
        wxBitmap bitmap(AppSettings::get_default_path()+_T("scope_rt.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("scope_lb.png"))
    {
        wxBitmap bitmap(AppSettings::get_default_path()+_T("scope_lb.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("scope_rb.png"))
    {
        wxBitmap bitmap(AppSettings::get_default_path()+_T("scope_rb.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("about_34.png"))
    {
        wxBitmap bitmap(AppSettings::get_default_path()+_T("about_34.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    return wxNullBitmap;
	////@end MainFrame bitmap retrieval
}

/*!
* Get icon resources
*/

wxIcon MainFrame::GetIconResource( const wxString& /*name*/ )
{
	// Icon retrieval
	#include "../img/scope2.xpm"
    wxIcon icon( scope2_xpm);
    return icon;

 //   wxUnusedVar(name);
 //   if (name == _T("scope2.png"))
 //   {
 //       wxIcon icon(_T("scope2.png"), wxBITMAP_TYPE_PNG);
 //       return icon;
 //   }
 //   return wxNullIcon;
}
/*!
* wxEVT_COMMAND_MENU_SELECTED event handler for ID_EXIT_TOOL
*/

void MainFrame::OnExitToolClick( wxCommandEvent& /* event*/ )
{
	this->Close();
}


/*!
* wxEVT_SASH_DRAGGED event handler for ID_SASHLAYOUTWINDOW
*/

void MainFrame::OnLeftWindowSashDragged( wxSashEvent& event )
{
	if (event.GetDragStatus() == wxSASH_STATUS_OUT_OF_RANGE)
		return;

	this->m_left_pane->SetDefaultSize(wxSize(event.GetDragRect().width, 1000));
	PerformLayout();
}

/*!
* wxEVT_SIZE event handler for ID_MAIN_FRAME
*/

void MainFrame::OnSize( wxSizeEvent& /* event*/ )
{
#if wxUSE_MDI_ARCHITECTURE
	wxLayoutAlgorithm layout;
	layout.LayoutFrame(this);
#endif // wxUSE_MDI_ARCHITECTURE
	this->CheckScopeSplitters();
	if( this->m_main_toolbar)
		this->m_main_toolbar->Refresh( true);
}


/*!
 * wxEVT_SASH_DRAGGED event handler for ID_SASHLAYOUTWINDOW2
 */

void MainFrame::OnBottomWindowSashDragged( wxSashEvent& event )
{
	if (event.GetDragStatus() == wxSASH_STATUS_OUT_OF_RANGE)
		return;

	this->m_bottom_pane->SetDefaultSize( wxSize( 1000, event.GetDragRect().height));
	PerformLayout();
}


/*!
 * wxEVT_CLOSE_WINDOW event handler for ID_MAIN_FRAME
 */

void MainFrame::OnCloseWindow( wxCloseEvent& event )
{
	if( this->m_app_settings)
	{
		for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
		{
			::wxMutexGuiLeave();
			(( GenericBoard*)this->m_app_settings->m_board_array[i])->DoStopRunning();
		}
		{
		    wxMutexLocker lock( this->m_app_settings->m_mutex);
			for( int i= 0; i< SCOPE_NUM_PANELS; i++)
			{
				this->m_scope_panel_array[i]->Freeze();
			}
			this->m_app_settings->Save();
		}
		delete this->m_app_settings;
		this->m_app_settings= NULL;
	}
    event.Skip();
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_COMMON_RUN_TOGGLEBUTTON
 */
#include "virtual_board_channel.h"
void MainFrame::OnCommonRunTogglebuttonClick( wxCommandEvent& /* event*/ )
{
	this->DoStartStopRunning();
}

void MainFrame::DoStartStopRunning( void)
{
	this->m_common_run_control->SetLabel( this->m_common_run_control->GetValue()? _("Stop"): _("Run"));
	MainFrame::SetStsBarText( this->m_common_run_control->GetValue() ? _("RUN"): _(""), STS_BAR_PANE_RUN);
	this->m_common_TTL_control->Enable( !this->m_common_run_control->GetValue());
	this->m_size_X_control->Enable( !this->m_common_run_control->GetValue());

	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		((GenericBoard*) this->m_app_settings->m_board_array[i])->WriteTriggerMode( this->m_common_run_control->GetValue()!= 0);
		if( this->m_common_run_control->GetValue()!= 0)
		{
			((GenericBoard*) this->m_app_settings->m_board_array[i])->DoStartRunning();
		}
		else
        {
            ::wxMutexGuiLeave();
			((GenericBoard*) this->m_app_settings->m_board_array[i])->DoStopRunning();
		}
	}
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TRIGGER_FORCE_BUTTON
 */

void MainFrame::OnTriggerForceButtonClick( wxCommandEvent& /* event*/ )
{
	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		((GenericBoard*) this->m_app_settings->m_board_array[i])->WriteSoftwareTrigger();
	}
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TRIGGER_AUTO_TOGGLEBUTTON
 */

void MainFrame::OnTriggerAutoTogglebuttonClick( wxCommandEvent& /* event*/ )
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	int msk= this->m_app_settings->m_trigger_msk;
	if( this->m_trigger_auto_control->GetValue())
		msk|= (int)AppSettings::SW_AUTO_TRIGGER_MSK;
	else
		msk&= ~(int)AppSettings::SW_AUTO_TRIGGER_MSK;
	this->m_app_settings->m_trigger_msk= (AppSettings::TRIGGER_MSK)msk;
	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->ScopeRefresh( i, false);
	}
	MainFrame::SetStsBarText( this->m_trigger_auto_control->GetValue() ? _("AUTO TRIG"): _(""), STS_BAR_PANE_AUTO_TRIG);
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TRIGGER_EXT_TOGGLEBUTTON
 */

void MainFrame::OnTriggerExtTogglebuttonClick( wxCommandEvent& /* event */)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	int msk= this->m_app_settings->m_trigger_msk;
	if( this->m_trigger_ext_control->GetValue())
		msk|= (int)AppSettings::EXT_TRIGGER_MSK;
	else
		msk&= ~(int)AppSettings::EXT_TRIGGER_MSK;
	this->m_app_settings->m_trigger_msk= (AppSettings::TRIGGER_MSK)msk;
	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		((GenericBoard*) this->m_app_settings->m_board_array[i])->WriteTriggerMode( this->m_common_run_control->GetValue()!= 0);
	}
	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->ScopeRefresh( i, false);
	}
	MainFrame::SetStsBarText( this->m_trigger_ext_control->GetValue() ? _("EXT TRIG"): _(""), STS_BAR_PANE_EXT_TRIG);

}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_TRIGGER_POST_SPINCTRL
 */

void MainFrame::OnTriggerPostSpinctrlUpdated( wxSpinEvent& event )
{
	this->UpdateTriggerPost( event.GetPosition());
}


/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_LEFT_TOOL
 */

void MainFrame::OnViewLeftToolClick( wxCommandEvent& /*event */ )
{
	this->DoShowHideLeftPane(!this->m_left_pane->IsShown( ));
	this->m_app_settings->m_show_left_pane= this->m_left_pane->IsShown( );
}

void MainFrame::DoShowHideLeftPane( bool show)
{
	this->m_left_pane->Show( show);
	PerformLayout();
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_BOTTOM_TOOL
 */

void MainFrame::OnViewBottomToolClick( wxCommandEvent& /* event*/ )
{
	this->DoShowHideBottomPane( !this->m_bottom_pane->IsShown());
	this->m_app_settings->m_show_bottom_pane= this->m_bottom_pane->IsShown( );
}

void MainFrame::DoShowHideBottomPane( bool show)
{
	this->m_bottom_pane->Show( show);
	PerformLayout();
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_GRID_CHOOSE_COLOR_BUTTON
 */

void MainFrame::OnGridChooseColor1ButtonClick( wxCommandEvent& /* event*/ )
{
	this->DoGridChooseColor( 0, this->m_grid_color_1_control);
}
void MainFrame::DoGridChooseColor( int scope_index, wxPanel *grid_color_control)
{
	wxColourData colour_data;
	colour_data.SetColour( this->m_app_settings->m_grid_line_color[ scope_index]);
	wxColourDialog *dlg= new wxColourDialog( this, &colour_data);
	dlg->Centre();
	if( dlg->ShowModal()== wxID_OK)
	{
		wxMutexLocker lock( this->m_app_settings->m_mutex);
		this->m_app_settings->m_grid_line_color[ scope_index]= dlg->GetColourData().GetColour();
		grid_color_control->SetBackgroundColour( this->m_app_settings->m_grid_line_color[ scope_index]);
		grid_color_control->Refresh();
		this->UpdateGrid( scope_index);
	}
	delete dlg;
}

bool MainFrame::UpdateControls( void)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);

	// Background controls
	this->m_back_color_1_control->SetBackgroundColour( this->m_app_settings->m_background_color[ 0]);
	this->m_back_color_1_control->Refresh();
	wxBrush back_1_brush= wxBrush( this->m_app_settings->m_background_color[ 0]);
	this->m_app_settings->SetBackBrush( 0, &back_1_brush);

	this->m_back_color_2_control->SetBackgroundColour( this->m_app_settings->m_background_color[ 1]);
	this->m_back_color_2_control->Refresh();
	wxBrush back_2_brush= wxBrush( this->m_app_settings->m_background_color[ 1]);
	this->m_app_settings->SetBackBrush( 1, &back_2_brush);

	this->m_back_color_3_control->SetBackgroundColour( this->m_app_settings->m_background_color[ 2]);
	this->m_back_color_3_control->Refresh();
	wxBrush back_3_brush= wxBrush( this->m_app_settings->m_background_color[ 2]);
	this->m_app_settings->SetBackBrush( 2, &back_3_brush);

	this->m_back_color_4_control->SetBackgroundColour( this->m_app_settings->m_background_color[ 3]);
	this->m_back_color_4_control->Refresh();
	wxBrush back_4_brush= wxBrush( this->m_app_settings->m_background_color[ 3]);
	this->m_app_settings->SetBackBrush( 3, &back_4_brush);

	// Grid controls
	this->m_grid_line_type_1_control->SetSelection( (int)this->m_app_settings->m_grid_line_type[ 0]);
	this->m_grid_line_width_1_control->SetValue( (int)this->m_app_settings->m_grid_line_width[ 0]);
	this->m_grid_color_1_control->SetBackgroundColour( this->m_app_settings->m_grid_line_color[ 0]);
	this->m_grid_color_1_control->Refresh();
	this->UpdateGrid( 0);

	this->m_grid_line_type_2_control->SetSelection( (int)this->m_app_settings->m_grid_line_type[ 1]);
	this->m_grid_line_width_2_control->SetValue( (int)this->m_app_settings->m_grid_line_width[ 1]);
	this->m_grid_color_2_control->SetBackgroundColour( this->m_app_settings->m_grid_line_color[ 1]);
	this->m_grid_color_2_control->Refresh();
	this->UpdateGrid( 1);

	this->m_grid_line_type_3_control->SetSelection( (int)this->m_app_settings->m_grid_line_type[ 2]);
	this->m_grid_line_width_3_control->SetValue( (int)this->m_app_settings->m_grid_line_width[ 2]);
	this->m_grid_color_3_control->SetBackgroundColour( this->m_app_settings->m_grid_line_color[ 2]);
	this->m_grid_color_3_control->Refresh();
	this->UpdateGrid( 2);

	this->m_grid_line_type_4_control->SetSelection( (int)this->m_app_settings->m_grid_line_type[ 3]);
	this->m_grid_line_width_4_control->SetValue( (int)this->m_app_settings->m_grid_line_width[ 3]);
	this->m_grid_color_4_control->SetBackgroundColour( this->m_app_settings->m_grid_line_color[ 3]);
	this->m_grid_color_4_control->Refresh();
	this->UpdateGrid( 3);

	// Record controls
	this->m_record_dir_control->SetValue( this->m_app_settings->m_record_folder);
	this->UpdateRecordFolder();

	// Common controls
	// Search the matching block size
	this->m_size_X_control->SetSelection( 0);
	for( int i= 0; i< (int)this->m_size_X_control->GetCount(); i++) {
		if( *( int*)this->m_size_X_control->GetClientData( i)>= this->m_app_settings->m_num_sample){
			this->m_size_X_control->SetSelection( i);
			break;
		}
	}
	// Trigger controls
	this->m_trigger_ext_control->SetValue( (this->m_app_settings->m_trigger_msk& AppSettings::EXT_TRIGGER_MSK)!= 0);
	this->m_trigger_auto_control->SetValue( (this->m_app_settings->m_trigger_msk& AppSettings::SW_AUTO_TRIGGER_MSK)!= 0);

	int buffer_length= GetBufferLength();
	this->m_trigger_post_control->SetValue( this->m_app_settings->m_post_trigger* 100/ buffer_length);
	this->m_trigger_edge_control->SetSelection( this->m_app_settings->m_trigger_edge_type);
	this->UpdateTriggerEdge();

	// Get best combo selection for sec_2_div setting
	const int num_sels= sizeof( SEC_PER_DIV_TABLE)/sizeof( SEC_PER_DIV_TABLE[0]);
	double sec_per_div_1= 1/ this->m_app_settings->m_sec_2_div[ 0];
	for( int i= 1; i< num_sels; i++)
	{
		if( ( SEC_PER_DIV_TABLE[i-1]<= sec_per_div_1)&& 
			( SEC_PER_DIV_TABLE[i]>= sec_per_div_1))
		{
			if(( sec_per_div_1- SEC_PER_DIV_TABLE[i-1])< ( SEC_PER_DIV_TABLE[i]- sec_per_div_1))
			{
				this->m_sec_per_div_1_control->SetSelection( i- 1);
			}
			else
			{
				this->m_sec_per_div_1_control->SetSelection( i);
			}
			break;
		}
	}
	double sec_per_div_2= 1/ this->m_app_settings->m_sec_2_div[ 1];
	for( int i= 1; i< num_sels; i++)
	{
		if( ( SEC_PER_DIV_TABLE[i-1]<= sec_per_div_2)&& 
			( SEC_PER_DIV_TABLE[i]>= sec_per_div_2))
		{
			if(( sec_per_div_2- SEC_PER_DIV_TABLE[i-1])< ( SEC_PER_DIV_TABLE[i]- sec_per_div_2))
			{
				this->m_sec_per_div_2_control->SetSelection( i- 1);
			}
			else
			{
				this->m_sec_per_div_2_control->SetSelection( i);
			}
			break;
		}
	}
	double sec_per_div_3= 1/ this->m_app_settings->m_sec_2_div[ 2];
	for( int i= 1; i< num_sels; i++)
	{
		if( ( SEC_PER_DIV_TABLE[i-1]<= sec_per_div_3)&& 
			( SEC_PER_DIV_TABLE[i]>= sec_per_div_3))
		{
			if(( sec_per_div_3- SEC_PER_DIV_TABLE[i-1])< ( SEC_PER_DIV_TABLE[i]- sec_per_div_3))
			{
				this->m_sec_per_div_3_control->SetSelection( i- 1);
			}
			else
			{
				this->m_sec_per_div_3_control->SetSelection( i);
			}
			break;
		}
	}
	double sec_per_div_4= 1/ this->m_app_settings->m_sec_2_div[ 3];
	for( int i= 1; i< num_sels; i++)
	{
		if( ( SEC_PER_DIV_TABLE[i-1]<= sec_per_div_4)&& 
			( SEC_PER_DIV_TABLE[i]>= sec_per_div_4))
		{
			if(( sec_per_div_4- SEC_PER_DIV_TABLE[i-1])< ( SEC_PER_DIV_TABLE[i]- sec_per_div_4))
			{
				this->m_sec_per_div_4_control->SetSelection( i- 1);
			}
			else
			{
				this->m_sec_per_div_4_control->SetSelection( i);
			}
			break;
		}
	}

	// Overridden into WriteSampleBufferSize
	this->m_app_settings->m_max_log_X= 100+ this->m_app_settings->m_num_sample;
	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		(( GenericBoard*)this->m_app_settings->m_board_array[i])->WriteSampleBufferSize();
	}

	m_offset_sec_position_1_control->SetValue( m_app_settings->m_offsetSample[ 0]);
	UpdateOffsetSec( 0, m_app_settings->m_offsetSample[ 0]);
	SetHoriziontalLabel( m_offset_position_1_static, m_app_settings->m_offsetSample[ 0]);

	m_offset_sec_position_2_control->SetValue( m_app_settings->m_offsetSample[ 1]);
	UpdateOffsetSec( 1, m_app_settings->m_offsetSample[ 1]);
	SetHoriziontalLabel( m_offset_position_2_static, m_app_settings->m_offsetSample[ 1]);

	m_offset_sec_position_3_control->SetValue( m_app_settings->m_offsetSample[ 2]);
	UpdateOffsetSec( 2, m_app_settings->m_offsetSample[ 2]);
	SetHoriziontalLabel( m_offset_position_3_static, m_app_settings->m_offsetSample[ 2]);

	m_offset_sec_position_4_control->SetValue( m_app_settings->m_offsetSample[ 3]);
	UpdateOffsetSec( 3, m_app_settings->m_offsetSample[ 3]);
	SetHoriziontalLabel( m_offset_position_4_static, m_app_settings->m_offsetSample[ 3]);

	//this->m_use_ext_clock_control->SetValue( this->m_app_settings->m_use_ext_clock);
	//// Search first corrisponding value to setted MHz 
	//{
	//	int sel= 0;
	//	for( ; sel< sizeof( CVT_V1724_EXTCLOCK_KHZ)/sizeof( CVT_V1724_EXTCLOCK_KHZ[0])- 1; sel++)
	//	{
	//		if( this->m_app_settings->m_ext_rate_MHz* 1000<= CVT_V1724_EXTCLOCK_KHZ[ sel])
	//			break;
	//	}
	//	this->m_ext_clock_control->SetSelection( sel);
	//	this->UpdateClock( this->m_app_settings->m_ext_rate_MHz);
	//}

	this->m_trigger_position_keep_control->SetValue( this->m_app_settings->m_trigger_position_keep);

	this->m_common_TTL_control->SetValue( this->m_app_settings->m_use_TTL);
	this->UpdateUseTTL();

	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->ScopeRefresh( i, true);
	}

	// Status bar update
	MainFrame::SetStsBarText( this->m_app_settings->m_use_ext_clock? _("EXT CLK"): _(""), STS_BAR_PANE_EXT_CLOCK);
	MainFrame::SetStsBarText( this->m_trigger_ext_control->GetValue() ? _("EXT TRIG"): _(""), STS_BAR_PANE_EXT_TRIG);
	MainFrame::SetStsBarText( this->m_trigger_auto_control->GetValue() ? _("AUTO TRIG"): _(""), STS_BAR_PANE_AUTO_TRIG);

	// Common DAC control
	if( this->m_DAC_sizer->IsShown((size_t)0)){
		if( this->m_app_settings->m_board_array.GetCount()) {
			PhysicalBoardChannel* board_channel= ( PhysicalBoardChannel* )((GenericBoard*)this->m_app_settings->m_board_array[0])->m_channel_array[0];
			this->m_ch_DAC_control->SetValue( (int)(double)( board_channel->m_DAC_offset_bit));
			this->UpdateDAC();
		}
	}
	return true;
}
bool MainFrame::UpdateGrid( int scope_index)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	int wx_pen_style= wxSOLID;
	switch( this->m_app_settings->m_grid_line_type[ scope_index])
	{
	case AppSettings::NO_LINE:
		if( !this->m_app_settings->SetGridPen( scope_index, NULL))
			return false;
		this->ScopeRefresh( scope_index, true);
		return true;
	case AppSettings::DASHED:
		wx_pen_style= wxSHORT_DASH;
		break;
	case AppSettings::DOTTED:
		wx_pen_style= wxDOT;
		break;
	case AppSettings::DASH_DOT:
		wx_pen_style= wxDOT_DASH;
		break;
	case AppSettings::SOLID:
	default:
		wx_pen_style= wxSOLID;
		break;
	}
	wxPen grid_pen= wxPen( this->m_app_settings->m_grid_line_color[ scope_index], this->m_app_settings->m_grid_line_width[ scope_index], wx_pen_style);

//	wxPen mid_grid_pen= wxPen( this->m_app_settings->m_grid_line_color, ( this->m_app_settings->m_grid_line_width<= 2)? 3: this->m_app_settings->m_grid_line_width<< 1, wx_pen_style);
	wxPen mid_grid_pen= wxPen( this->m_app_settings->m_grid_line_color[ scope_index], this->m_app_settings->m_grid_line_width[ scope_index]+ 1, wx_pen_style);
	if( !this->m_app_settings->SetGridPen( scope_index, &grid_pen, &mid_grid_pen))
		return false;
	this->ScopeRefresh( scope_index, true);

	return true;
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_GRID_LINE_WIDTH_SPINCTRL
 */

void MainFrame::OnGridLineWidth1SpinctrlUpdated( wxSpinEvent& event )
{
	this->UpdateGridLineWidth( 0, event.GetPosition());
}


/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_GRID_LINE_TYPE_CHOICE
 */

void MainFrame::OnGridLineType1ChoiceSelected( wxCommandEvent& /* event*/ )
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	this->m_app_settings->m_grid_line_type[ 0]= ( AppSettings::GRID_LINE_TYPE)this->m_grid_line_type_1_control->GetSelection();
	this->UpdateGrid( 0);
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON
 */

void MainFrame::OnBackChooseColor1ButtonClick( wxCommandEvent& /* event*/ )
{
	this->DoChooseColor( 0, this->m_back_color_1_control);
}
void MainFrame::DoChooseColor( int scope_index, wxPanel *back_color_control)
{
	wxColourData colour_data;
	colour_data.SetColour( this->m_app_settings->m_background_color[ scope_index]);
	wxColourDialog *dlg= new wxColourDialog( this, &colour_data);
	dlg->Centre();
	if( dlg->ShowModal()== wxID_OK)
	{
		wxMutexLocker lock( this->m_app_settings->m_mutex);
		this->m_app_settings->m_background_color[ scope_index]= dlg->GetColourData().GetColour();
		back_color_control->SetBackgroundColour( this->m_app_settings->m_background_color[ scope_index]);
		back_color_control->Refresh();
		wxBrush back_brush= wxBrush( this->m_app_settings->m_background_color[ scope_index]);
		this->m_app_settings->SetBackBrush( scope_index, &back_brush);
		this->ScopeRefresh( scope_index, true);
	}
	delete dlg;
}


void MainFrame:: ScopeRefresh( int scope_index, bool erase_background)
{
	if( MainFrame::g_scope_panel_array[ scope_index]== NULL)
	 return;
    if( !MainFrame::g_scope_panel_array[ scope_index]->IsShown())
		return;
	if( erase_background)
	{
		MainFrame::g_scope_panel_array[ scope_index]->RefreshBackBitmap();
		MainFrame::g_scope_panel_array[ scope_index]->RefreshLeftBackBitmap();
	}
#ifndef __WXMSW__
	if( !::wxIsMainThread())
		::wxMutexGuiEnter();
#endif
	MainFrame::g_scope_panel_array[ scope_index]->Refresh();
#ifndef __WXMSW__
	if( !::wxIsMainThread())
		::wxMutexGuiLeave();
#endif
}

void MainFrame:: UpdateSamplesReadyLed( bool is_on)
{
#ifndef __WXMSW__
	if( !::wxIsMainThread())
		::wxMutexGuiEnter();
#endif

	MainFrame::g_samples_ready_control->SetBackgroundColour( is_on? wxColour(0, 255, 0): wxColour(255, 0, 0));
	MainFrame::g_samples_ready_control->Refresh();

#ifndef __WXMSW__
	if( !::wxIsMainThread())
		::wxMutexGuiLeave();
#endif
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_SIZE_X_CHOICE
 */

void MainFrame::OnSizeXChoiceSelected( wxCommandEvent& /* event*/ )
{
	this->m_app_settings->m_num_sample= GetBufferLength();

	// Overridden into WriteSampleBufferSize
	this->m_app_settings->m_max_log_X= 100+ this->m_app_settings->m_num_sample;
	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		(( GenericBoard*)this->m_app_settings->m_board_array[i])->WriteSampleBufferSize();
	}

	UpdateTriggerPost( m_trigger_post_control->GetValue());

	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->ScopeRefresh( i, true);
	}
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_GRID_LINE_WIDTH_SPINCTRL
 */

void MainFrame::OnGridLineWidth1SpinctrlTextUpdated( wxCommandEvent& /* event*/ )
{
	int value= atoi( this->m_grid_line_width_1_control->GetLabel().ToAscii());
	this->UpdateGridLineWidth( 0, value);
}

void MainFrame::UpdateGridLineWidth( int scope_index, int value)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	this->m_app_settings->m_grid_line_width[ scope_index]= value;
	this->UpdateGrid( scope_index);
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TRIGGER_POST_SPINCTRL
 */

void MainFrame::OnTriggerPostSpinctrlTextUpdated( wxCommandEvent& /* event*/ )
{
    int value= atoi( this->m_trigger_post_control->GetLabel().ToAscii());
	this->UpdateTriggerPost( value);
}
int MainFrame::GetBufferLength() const
{
	int sel_index= m_size_X_control->GetSelection();
	if( sel_index< 0) return 1;
	return *(int*)m_size_X_control->GetClientData( sel_index);
}

void MainFrame::UpdateTriggerPost( int value)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	if( value< 0) value= 0;
	else if( value> 100) value= 100;
	int buffer_length= GetBufferLength();
	this->m_app_settings->m_post_trigger= (buffer_length *value)/100;
	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		((GenericBoard*) this->m_app_settings->m_board_array[i])->WriteTriggerMode( this->m_common_run_control->GetValue()!= 0);
	}
	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->ScopeRefresh( i, true);
	}
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_SEC_PER_DIV_CHOICE
 */

void MainFrame::OnSecPerDiv1ChoiceSelected( wxCommandEvent& /* event*/ )
{
	int selection= this->m_sec_per_div_1_control->GetSelection();
	this->UpdateSecPerDiv( 0, selection, m_offset_sec_position_1_control, m_offset_position_1_static);
}


void MainFrame::UpdateSecPerDiv( int scope_index, int selection, wxSpinButton* spinControl, wxStaticText* labelControl)
{
	if( selection>= sizeof( SEC_PER_DIV_TABLE)/sizeof( SEC_PER_DIV_TABLE[0]))
		return;
	if( this->m_app_settings->m_trigger_position_keep)
	{
		double sec_2_div_old= this->m_app_settings->m_sec_2_div[ scope_index];
		double sample_2_sec_old= this->m_app_settings->m_sample_2_sec;
		this->m_app_settings->SetSec2Div( scope_index, 1.0/ SEC_PER_DIV_TABLE[ selection]);
		// recalculate offset to keep trigger position fixed on screen
		double fix_old= sec_2_div_old*( sample_2_sec_old*( this->m_app_settings->m_offsetSample[ scope_index]+ this->m_app_settings->m_max_log_X- this->m_app_settings->m_post_trigger));
		this->m_app_settings->m_offsetSample[ scope_index]= this->m_app_settings->m_sec_2_sample*( fix_old/ this->m_app_settings->m_sec_2_div[ scope_index])- ( this->m_app_settings->m_max_log_X- this->m_app_settings->m_post_trigger);
		spinControl->SetValue( this->m_app_settings->m_offsetSample[ scope_index]);
		SetHoriziontalLabel( labelControl, this->m_app_settings->m_offsetSample[ scope_index]);
	}
	else
	{
		this->m_app_settings->SetSec2Div( scope_index, 1.0/ SEC_PER_DIV_TABLE[ selection]);
	}
	this->ScopeRefresh( scope_index, true);
}

void MainFrame::UpdateOffsetSec( int scope_index, int valueSample)
{
    wxMutexLocker lock( this->m_app_settings->m_mutex);

	this->m_app_settings->m_offsetSample[ scope_index]= valueSample;

	this->ScopeRefresh( scope_index, true);
}

bool MainFrame::UpdateRecordFolder( void)
{
	if( !wxDir::Exists( this->m_record_dir_control->GetValue()))
		return false;
	this->m_app_settings->m_record_folder= this->m_record_dir_control->GetValue();
	this->m_record_dir_control->SetBackgroundColour(wxColour(255, 255, 255));
	this->m_record_dir_control->SetToolTip( this->m_record_dir_control->GetValue());
	this->m_record_dir_control->Refresh( true);
	return true;
}

/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_RECORDTOGGLEBUTTON
 */

void MainFrame::OnRecordtogglebuttonClick( wxCommandEvent& /*event */)
{
	wxString path= this->m_record_dir_control->GetValue();
	wxString file_name= _("caen_scope_");
	wxString date= wxDateTime::Now().FormatISODate();
	date.Replace( _T("-"), _T("_"));
	wxString time= wxDateTime::Now().FormatISOTime();
	time.Replace( _T(":"), _T("_"));
	wxString timestamp( wxString::Format( _T("%s_%s"), date.c_str(), time.c_str()));
	bool start= this->m_record_start_stop_control->GetValue();
	bool use_max_buffer= this->m_record_max_buffers_check_box->GetValue();
	int max_buffers= this->m_record_max_buffers_control->GetValue();
	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		(( GenericBoard *)this->m_app_settings->m_board_array[i])->ToggleRecordStatus( path, file_name, timestamp, start, use_max_buffer, max_buffers);
	}
	this->m_record_dir_browse_button->Enable( !start);
	this->m_record_dir_control->Enable( !start);
	this->m_record_max_buffers_check_box->Enable( !start);
	if( start)
		this->m_record_max_buffers_control->Enable( false);
	else
		this->m_record_max_buffers_control->Enable( this->m_record_max_buffers_check_box->GetValue());
	this->m_record_start_stop_control->SetLabel( this->m_record_start_stop_control->GetValue( )? _("Stop"): _("Start"));
	MainFrame::SetStsBarText( this->m_record_start_stop_control->GetValue( ) ? _("REC"): _(""), STS_BAR_PANE_REC);

}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_RECORDDIRBUTTON
 */

void MainFrame::OnRecorddirbuttonClick( wxCommandEvent& /*event*/ )
{
	// Show directory browse folder
	wxFileName org_dir( this->m_record_dir_control->GetValue());
	org_dir.Normalize();
	wxDirDialog dlg( this, _T("Choose a directory for recording"), org_dir.GetFullPath());
	if( dlg.ShowModal()!= wxID_OK )
		return;
	this->m_record_dir_control->SetValue( dlg.GetPath());

	this->UpdateRecordFolder();
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_RECORDDIRTEXTCTRL
 */

void MainFrame::OnRecorddirtextctrlUpdated( wxCommandEvent& /* event */)
{
	this->m_record_dir_control->SetBackgroundColour(wxColour(255, 128, 128));
	this->m_record_dir_control->Refresh( true);
}

/*!
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_RECORDDIRTEXTCTRL
 */

void MainFrame::OnRecorddirtextctrlEnter( wxCommandEvent& /*event*/ )
{
	this->UpdateRecordFolder();
}

/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_EXT_CLOCK_CHECKBOX
 */

//void MainFrame::OnExtClockCheckboxClick( wxCommandEvent& /*event */)
//{
//	int sel= this->m_ext_clock_control->GetSelection();
//	if( sel>= sizeof( CVT_V1724_EXTCLOCK_KHZ)/sizeof( CVT_V1724_EXTCLOCK_KHZ[0]))
//		sel= sizeof( CVT_V1724_EXTCLOCK_KHZ)/sizeof( CVT_V1724_EXTCLOCK_KHZ[0])- 1;
//
//	this->UpdateClock( (double)CVT_V1724_EXTCLOCK_KHZ[ sel]* 0.001);
//}

void MainFrame::UpdateClock( double value)
{
	//this->m_ext_clock_control->Enable( this->m_use_ext_clock_control->IsChecked());

	//// setup AppSettings
	//this->m_app_settings->SetClock( this->m_use_ext_clock_control->IsChecked(), value);
	//for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	//{
	//	this->ScopeRefresh( i, true);
	//}
	//MainFrame::SetStsBarText( this->m_app_settings->m_use_ext_clock? _("EXT CLK"): _(""), STS_BAR_PANE_EXT_CLOCK);

	// setup AppSettings
	this->m_app_settings->SetClock( false, value);
	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->ScopeRefresh( i, true);
	}
	MainFrame::SetStsBarText( false? _("EXT CLK"): _(""), STS_BAR_PANE_EXT_CLOCK);
}


/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_HELP_TOOL
 */

void MainFrame::OnHelpToolClick( wxCommandEvent& /* event*/ )
{
	InfoDialog dlg( this);
	dlg.ShowModal();
}

bool MainFrame::SetStsBarText( const wxString& text, int pane_index)
{
	if(( pane_index>= STS_BAR_NUM_PANES)|| ( MainFrame::g_main_statusbar== NULL))
		return false;
	//::wxMutexGuiEnter();
	MainFrame::g_main_statusbar->SetStatusText( text, pane_index);
	//::wxMutexGuiLeave();
	return true;
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_TRIGGER_EDGE_CHOICE
 */

void MainFrame::OnTriggerEdgeChoiceSelected( wxCommandEvent& /*event*/ )
{
	this->UpdateTriggerEdge();
}
void MainFrame::UpdateTriggerEdge( void)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	this->m_app_settings->m_trigger_edge_type= ( AppSettings::TRIGGER_EDGE_TYPE)this->m_trigger_edge_control->GetSelection();
	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		((GenericBoard*) this->m_app_settings->m_board_array[i])->WriteTriggerMode( this->m_common_run_control->GetValue()!= 0);
	}
	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->ScopeRefresh( i, true);
	}

	wxString sts_msg= _("");
	switch( this->m_app_settings->m_trigger_edge_type)
	{
	case AppSettings::FALLING_EDGE:
		sts_msg= _("FALLING EDGE");
		break;
	case AppSettings::RISING_EDGE:
		sts_msg= _("RISING EDGE");
		break;
	}
	MainFrame::SetStsBarText( sts_msg, STS_BAR_PANE_TRIG_EDGE);
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TOGGLEBUTTON
 */

void MainFrame::OnFrontPanelNimTogglebuttonClick( wxCommandEvent& /*event*/ )
{
	this->UpdateUseTTL();
}

void MainFrame::UpdateUseTTL( void)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	this->m_app_settings->m_use_TTL= this->m_common_TTL_control->GetValue();
	for( size_t i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		((GenericBoard*) this->m_app_settings->m_board_array[i])->SetFrontPanelIO( this->m_app_settings->m_use_TTL!= 0);
	}
	this->m_common_TTL_control->SetLabel( this->m_app_settings->m_use_TTL? _("NIM"): _("TTL"));
	MainFrame::SetStsBarText( !this->m_app_settings->m_use_TTL? _("NIM"): _("TTL"), STS_BAR_PANE_NIM);
}

/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TRIGGER_POSITION_KEEP_CHECKBOX
 */

void MainFrame::OnTriggerPositionKeepCheckboxClick( wxCommandEvent& /*event */)
{
	this->m_app_settings->m_trigger_position_keep= this->m_trigger_position_keep_control->GetValue();
}
/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_TOOL
 */

void MainFrame::OnViewScopeLeftTopToolClick( wxCommandEvent& /* event*/ )
{
	this->DoShowHideScopeLeftTopPane( !this->m_scope_panel_array[SCOPE_POS_TOP_LEFT]->IsShown(), true);
	this->m_app_settings->m_show_scope_left_top_pane= this->m_scope_panel_array[SCOPE_POS_TOP_LEFT]->IsShown( );
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_TOOL3
 */

void MainFrame::OnViewScopeRightTopToolClick( wxCommandEvent& /* event*/ )
{
	this->DoShowHideScopeRightTopPane( !this->m_scope_panel_array[SCOPE_POS_TOP_RIGHT]->IsShown(), true);
	this->m_app_settings->m_show_scope_right_top_pane= this->m_scope_panel_array[SCOPE_POS_TOP_RIGHT]->IsShown( );
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_SCOPE_LEFT_BOTTOM_TOOL
 */

void MainFrame::OnViewScopeLeftBottomToolClick( wxCommandEvent& /* event*/ )
{
	this->DoShowHideScopeLeftBottomPane( !this->m_scope_panel_array[SCOPE_POS_BOTTOM_LEFT]->IsShown(), true);
	this->m_app_settings->m_show_scope_left_bottom_pane= this->m_scope_panel_array[SCOPE_POS_BOTTOM_LEFT]->IsShown( );
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_SCOPE_RIGHT_BOTTOM_TOOL
 */

void MainFrame::OnViewScopeRightBottomToolClick( wxCommandEvent& /* event*/ )
{
	this->DoShowHideScopeRightBottomPane( !this->m_scope_panel_array[SCOPE_POS_BOTTOM_RIGHT]->IsShown(), true);
	this->m_app_settings->m_show_scope_right_bottom_pane= this->m_scope_panel_array[SCOPE_POS_BOTTOM_RIGHT]->IsShown( );
}

void MainFrame::DoShowHideScopeLeftTopPane( bool show, bool do_check)
{
	this->m_scope_panel_array[ SCOPE_POS_TOP_LEFT]->Show( show);
	if( do_check)
		this->CheckScopeSplitters();
}

void MainFrame::DoShowHideScopeRightTopPane( bool show, bool do_check)
{
	this->m_scope_panel_array[ SCOPE_POS_TOP_RIGHT]->Show( show);
	if( do_check)
		this->CheckScopeSplitters();
}

void MainFrame::DoShowHideScopeLeftBottomPane( bool show, bool do_check)
{
	this->m_scope_panel_array[ SCOPE_POS_BOTTOM_LEFT]->Show( show);
	if( do_check)
		this->CheckScopeSplitters();
}
void MainFrame::DoShowHideScopeRightBottomPane( bool show, bool do_check)
{
	this->m_scope_panel_array[ SCOPE_POS_BOTTOM_RIGHT]->Show( show);
	if( do_check)
		this->CheckScopeSplitters();
}
void MainFrame::CheckScopeSplitters()
{
	if( this->m_scope_panel_array[0]== NULL)
		return;
	//
	// Top Splitter
	if( !this->m_scope_panel_array[ SCOPE_POS_TOP_LEFT]->IsShown( )&& !this->m_scope_panel_array[ SCOPE_POS_TOP_RIGHT]->IsShown( ))
	{
		// Hide Top splitter
		this->m_scope_vert_splitter_top->Show( false);
		if( this->m_scope_vert_splitter_top->IsSplit())
			this->m_scope_vert_splitter_top->Unsplit( );
	}
	else
	{
		this->m_scope_vert_splitter_top->Show( true);

		if( this->m_scope_panel_array[ SCOPE_POS_TOP_LEFT]->IsShown( )&& this->m_scope_panel_array[ SCOPE_POS_TOP_RIGHT]->IsShown( ))
		{
			// Split Top slitter
			if( this->m_scope_vert_splitter_top->IsSplit())
				this->m_scope_vert_splitter_top->Unsplit( );
			this->m_scope_vert_splitter_top->SplitVertically( this->m_scope_panel_array[ SCOPE_POS_TOP_LEFT], this->m_scope_panel_array[ SCOPE_POS_TOP_RIGHT]);
			int width, height;
			this->m_scope_vert_splitter_top->GetClientSize( &width, &height);
			this->m_scope_vert_splitter_top->SetSashPosition( width/2, true);
		}
		else if( this->m_scope_panel_array[ SCOPE_POS_TOP_LEFT]->IsShown( ))
		{
			if( this->m_scope_vert_splitter_top->IsSplit())
				this->m_scope_vert_splitter_top->Unsplit( this->m_scope_panel_array[ SCOPE_POS_TOP_RIGHT]);
			else 
			{
				if( this->m_scope_vert_splitter_top->GetWindow1())
					this->m_scope_vert_splitter_top->ReplaceWindow( this->m_scope_vert_splitter_top->GetWindow1(), this->m_scope_panel_array[ SCOPE_POS_TOP_LEFT]);
				else
					this->m_scope_vert_splitter_top->Initialize( this->m_scope_panel_array[ SCOPE_POS_TOP_LEFT]);
			}
		}
		else
		{
			if( this->m_scope_vert_splitter_top->IsSplit())
				this->m_scope_vert_splitter_top->Unsplit( this->m_scope_panel_array[ SCOPE_POS_TOP_LEFT]);
			else
			{
				if( this->m_scope_vert_splitter_top->GetWindow1())
					this->m_scope_vert_splitter_top->ReplaceWindow( this->m_scope_vert_splitter_top->GetWindow1(), this->m_scope_panel_array[ SCOPE_POS_TOP_RIGHT]);
				else
					this->m_scope_vert_splitter_top->Initialize( this->m_scope_panel_array[ SCOPE_POS_TOP_RIGHT]);
			}
		}
	}

	//
	// Bottom Splitter
	if( !this->m_scope_panel_array[ SCOPE_POS_BOTTOM_LEFT]->IsShown( )&& !this->m_scope_panel_array[ SCOPE_POS_BOTTOM_RIGHT]->IsShown( ))
	{
		// Hide Top splitter
		this->m_scope_vert_splitter_bottom->Show( false);
		if( this->m_scope_vert_splitter_bottom->IsSplit())
			this->m_scope_vert_splitter_bottom->Unsplit( );
	}	
	else 
	{
		this->m_scope_vert_splitter_bottom->Show( true);
		if( this->m_scope_panel_array[ SCOPE_POS_BOTTOM_LEFT]->IsShown( )&& this->m_scope_panel_array[ SCOPE_POS_BOTTOM_RIGHT]->IsShown( ))
		{
			// Split Top slitter
			if( this->m_scope_vert_splitter_bottom->IsSplit())
				this->m_scope_vert_splitter_bottom->Unsplit( );
			this->m_scope_vert_splitter_bottom->SplitVertically( this->m_scope_panel_array[ SCOPE_POS_BOTTOM_LEFT], this->m_scope_panel_array[ SCOPE_POS_BOTTOM_RIGHT]);
			int width, height;
			this->m_scope_vert_splitter_bottom->GetClientSize( &width, &height);
			this->m_scope_vert_splitter_bottom->SetSashPosition( width/2, true);
		}
		else if( this->m_scope_panel_array[ SCOPE_POS_BOTTOM_LEFT]->IsShown( ))
		{
			if( this->m_scope_vert_splitter_bottom->IsSplit())
				this->m_scope_vert_splitter_bottom->Unsplit( this->m_scope_panel_array[ SCOPE_POS_BOTTOM_RIGHT]);
			else
			{
				if( this->m_scope_vert_splitter_bottom->GetWindow1())
					this->m_scope_vert_splitter_bottom->ReplaceWindow( this->m_scope_vert_splitter_bottom->GetWindow1(), this->m_scope_panel_array[ SCOPE_POS_BOTTOM_LEFT]);
				else
					this->m_scope_vert_splitter_bottom->Initialize( this->m_scope_panel_array[ SCOPE_POS_BOTTOM_LEFT]);
			}
		}
		else
		{
			if( this->m_scope_vert_splitter_bottom->IsSplit())
				this->m_scope_vert_splitter_bottom->Unsplit( this->m_scope_panel_array[ SCOPE_POS_BOTTOM_LEFT]);
			else
			{
				if( this->m_scope_vert_splitter_bottom->GetWindow1())
					this->m_scope_vert_splitter_bottom->ReplaceWindow( this->m_scope_vert_splitter_bottom->GetWindow1(), this->m_scope_panel_array[ SCOPE_POS_BOTTOM_RIGHT]);
				else
					this->m_scope_vert_splitter_bottom->Initialize( this->m_scope_panel_array[ SCOPE_POS_BOTTOM_RIGHT]);
			}
		}
	}
	//
	// Horizontal splitter
	if( !this->m_scope_vert_splitter_top->IsShown( )&& !this->m_scope_vert_splitter_bottom->IsShown( ))
	{
		this->m_scope_horiz_splitter->Show( false);
		if( this->m_scope_horiz_splitter->IsSplit())
			this->m_scope_horiz_splitter->Unsplit( );
	}
	else 
	{
		this->m_scope_horiz_splitter->Show( true);

		if( this->m_scope_vert_splitter_top->IsShown( )&& this->m_scope_vert_splitter_bottom->IsShown( ))
		{
			// Split Top slitter
			if( this->m_scope_horiz_splitter->IsSplit())
				this->m_scope_horiz_splitter->Unsplit( );
			this->m_scope_horiz_splitter->SplitHorizontally( this->m_scope_vert_splitter_top, this->m_scope_vert_splitter_bottom);
			int width, height;
			this->m_scope_horiz_splitter->GetClientSize( &width, &height);
			this->m_scope_horiz_splitter->SetSashPosition( height/ 2, true);
		}
		else if( this->m_scope_vert_splitter_top->IsShown( ))
		{
			if( this->m_scope_horiz_splitter->IsSplit())
				this->m_scope_horiz_splitter->Unsplit( this->m_scope_vert_splitter_bottom);
			else
			{
				if( this->m_scope_horiz_splitter->GetWindow1())
					this->m_scope_horiz_splitter->ReplaceWindow( this->m_scope_horiz_splitter->GetWindow1(), this->m_scope_vert_splitter_top);
				else
					this->m_scope_horiz_splitter->Initialize( this->m_scope_vert_splitter_top);
			}
		}
		else
		{
			if( this->m_scope_horiz_splitter->IsSplit())
				this->m_scope_horiz_splitter->Unsplit( this->m_scope_vert_splitter_top);
			else
			{
				if( this->m_scope_horiz_splitter->GetWindow1())
					this->m_scope_horiz_splitter->ReplaceWindow( this->m_scope_horiz_splitter->GetWindow1(), this->m_scope_vert_splitter_bottom);
				else
					this->m_scope_horiz_splitter->Initialize( this->m_scope_vert_splitter_bottom);
			}
		}
	}
	this->m_scope_vert_splitter_top->SetSashGravity( 0.5);
	this->m_scope_vert_splitter_bottom->SetSashGravity( 0.5);
	this->m_scope_horiz_splitter->SetSashGravity( 0.5);


	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->ScopeRefresh( i, false);
	}
}

void MainFrame::OnScopeHorizSplitterwindowSashPosChanged( wxSplitterEvent& /*event */)
{
	PerformLayout();
}
void MainFrame::OnScopeVertTopSplitterwindowSashPosChanged ( wxSplitterEvent& /*event */)
{
	PerformLayout();
}

void MainFrame::PerformLayout()
{
#if wxUSE_MDI_ARCHITECTURE
	wxLayoutAlgorithm layout;
	layout.LayoutFrame(this);
#endif // wxUSE_MDI_ARCHITECTURE
	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		this->ScopeRefresh( i, false);
	}
}

void MainFrame::OnScopeVertBottomSplitterwindowSashPosChanged( wxSplitterEvent& /*event */)
{
	PerformLayout();
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON
 */

void MainFrame::OnBackChooseColor2ButtonClick( wxCommandEvent& /*event */)
{
	this->DoChooseColor( 1, this->m_back_color_2_control);
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CHOICE
 */

void MainFrame::OnSecPerDiv2ChoiceSelected( wxCommandEvent& /*event */)
{
	int selection= this->m_sec_per_div_2_control->GetSelection();
	this->UpdateSecPerDiv( 1, selection, m_offset_sec_position_2_control, m_offset_position_2_static);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON1
 */

void MainFrame::OnGridChooseColor2ButtonClick( wxCommandEvent& /*event */)
{
	this->DoGridChooseColor( 1, this->m_grid_color_2_control);
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINCTRL1
 */

void MainFrame::OnGridLineWidth2SpinctrlUpdated( wxSpinEvent& event )
{
	this->UpdateGridLineWidth( 1, event.GetPosition());
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_SPINCTRL1
 */

void MainFrame::OnGridLineWidth2SpinctrlTextUpdated( wxCommandEvent& /*event */)
{
	int value= atoi( this->m_grid_line_width_2_control->GetLabel().ToAscii());
	this->UpdateGridLineWidth( 1, value);
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CHOICE1
 */

void MainFrame::OnGridLineType2ChoiceSelected( wxCommandEvent& /*event */)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	this->m_app_settings->m_grid_line_type[ 1]= ( AppSettings::GRID_LINE_TYPE)this->m_grid_line_type_2_control->GetSelection();
	this->UpdateGrid( 1);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON2
 */

void MainFrame::OnBackChooseColor3ButtonClick( wxCommandEvent& /*event */)
{
	this->DoChooseColor( 2, this->m_back_color_3_control);
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CHOICE2
 */

void MainFrame::OnSecPerDiv3ChoiceSelected( wxCommandEvent& /*event */)
{
	int selection= this->m_sec_per_div_3_control->GetSelection();
	this->UpdateSecPerDiv( 2, selection, m_offset_sec_position_3_control, m_offset_position_3_static);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON3
 */

void MainFrame::OnGridChooseColor3ButtonClick( wxCommandEvent& /*event */)
{
	this->DoGridChooseColor( 2, this->m_grid_color_3_control);
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINCTRL3
 */

void MainFrame::OnGridLineWidth3SpinctrlUpdated( wxSpinEvent& event )
{
	this->UpdateGridLineWidth( 2, event.GetPosition());
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_SPINCTRL3
 */

void MainFrame::OnGridLineWidth3SpinctrlTextUpdated( wxCommandEvent& /*event */)
{
	int value= atoi( this->m_grid_line_width_3_control->GetLabel().ToAscii());
	this->UpdateGridLineWidth( 2, value);
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CHOICE3
 */

void MainFrame::OnGridLineType3ChoiceSelected( wxCommandEvent& /*event */)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	this->m_app_settings->m_grid_line_type[ 2]= ( AppSettings::GRID_LINE_TYPE)this->m_grid_line_type_3_control->GetSelection();
	this->UpdateGrid( 2);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON4
 */

void MainFrame::OnBackChooseColor4ButtonClick( wxCommandEvent& /*event */)
{
	this->DoChooseColor( 3, this->m_back_color_4_control);
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CHOICE4
 */

void MainFrame::OnSecPerDiv4ChoiceSelected( wxCommandEvent& /*event */)
{
	int selection= this->m_sec_per_div_4_control->GetSelection();
	this->UpdateSecPerDiv( 3, selection, m_offset_sec_position_4_control, m_offset_position_4_static);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON5
 */

void MainFrame::OnGridChooseColor4ButtonClick( wxCommandEvent& /*event */)
{
	this->DoGridChooseColor( 3, this->m_grid_color_4_control);
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINCTRL5
 */

void MainFrame::OnGridLineWidth4SpinctrlUpdated( wxSpinEvent& event )
{
	this->UpdateGridLineWidth( 3, event.GetPosition());
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_SPINCTRL5
 */

void MainFrame::OnGridLineWidth4SpinctrlTextUpdated( wxCommandEvent& /*event */)
{
	int value= atoi( this->m_grid_line_width_4_control->GetLabel().ToAscii());
	this->UpdateGridLineWidth( 3, value);
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CHOICE5
 */

void MainFrame::OnGridLineType4ChoiceSelected( wxCommandEvent& /*event */)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	this->m_app_settings->m_grid_line_type[ 3]= ( AppSettings::GRID_LINE_TYPE)this->m_grid_line_type_4_control->GetSelection();
	this->UpdateGrid( 3);
}


/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_EXT_CLOCK_CHOICE
 */

//void MainFrame::OnExtClockChoiceSelected( wxCommandEvent& /*event*/ )
//{
//	int sel= this->m_ext_clock_control->GetSelection();
//	if( sel>= sizeof( CVT_V1724_EXTCLOCK_KHZ)/sizeof( CVT_V1724_EXTCLOCK_KHZ[0]))
//		sel= sizeof( CVT_V1724_EXTCLOCK_KHZ)/sizeof( CVT_V1724_EXTCLOCK_KHZ[0])- 1;
//
//	this->UpdateClock( (double)CVT_V1724_EXTCLOCK_KHZ[ sel]* 0.001);
//}




/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_RECORD_MAX_BUFFERS_CHECKBOX
 */

void MainFrame::OnRecordMaxBuffersCheckboxClick( wxCommandEvent& /*event*/ )
{
	this->m_record_max_buffers_control->Enable( this->m_record_max_buffers_check_box->GetValue());
}

void MainFrame::OnRecordEnd( wxCommandEvent& event )
{
	this->m_record_start_stop_control->SetValue( false);
	this->OnRecordtogglebuttonClick( event);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON1
 */

void MainFrame::OnMainDacResetButtonClick( wxCommandEvent& /*event*/ )
{
	this->m_ch_DAC_control->SetValue( 0);
	this->UpdateDAC();
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINBUTTON1
 */

void MainFrame::OnMainDacOffsetSpinbuttonUpdated( wxSpinEvent& /*event*/ )
{
	this->UpdateDAC();
}

void MainFrame::UpdateDAC( void) {
	PhysicalBoardChannel* board_channel= ( PhysicalBoardChannel*) ((GenericBoard*)this->m_app_settings->m_board_array[0])->m_channel_array[0];

	board_channel->m_DAC_offset_bit= this->m_ch_DAC_control->GetValue( );
	board_channel->WriteDACOffset( );
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_CONNECT_TOOL
 */

void MainFrame::OnConnectToolClick( wxCommandEvent& /*event*/ )
{
	SetConnected( !m_is_connected);
}
	
bool MainFrame::SetConnected( bool connect, bool prompt_user)
{
	this->m_main_toolbar->ToggleTool( ID_CONNECT_TOOL, connect);
	if( connect)
	{
		if( prompt_user)
		{
			// Show device selection form
			DeviceSelectDialog dlg( this);
			DeviceSelectDialog::LINK_TYPES link_type= DeviceSelectDialog::DLT_USB;
			if( !m_app_settings->m_link_type_string.CmpNoCase(_T("USB")))
			{
				link_type= DeviceSelectDialog::DLT_USB;
			}
			else if( !m_app_settings->m_link_type_string.CmpNoCase(_T("OPTICAL")))
			{
				link_type= DeviceSelectDialog::DLT_OPTICAL;
			}
			else if( !m_app_settings->m_link_type_string.CmpNoCase(_T("V1718")))
			{
				link_type= DeviceSelectDialog::DLT_V1718;
			}
			else if( !m_app_settings->m_link_type_string.CmpNoCase(_T("V2718")))
			{
				link_type= DeviceSelectDialog::DLT_V2718;
			}
			dlg.SetLinkType( link_type);
			dlg.SetLinkNumber( m_app_settings->m_link_num);
			dlg.SetNodeNumber( m_app_settings->m_node_num);
			dlg.SetBaseAddress( m_app_settings->m_base_address);
			if( dlg.ShowModal()!= wxOK)
			{
				this->m_main_toolbar->ToggleTool( ID_CONNECT_TOOL, m_is_connected);
				return false;
			}
			m_app_settings->m_link_type_string= _("");
			switch( dlg.GetLinkType( ))
			{
			case DeviceSelectDialog::DLT_USB:
				m_app_settings->m_link_type_string= _("USB");
				break;
			case DeviceSelectDialog::DLT_OPTICAL:
				m_app_settings->m_link_type_string= _("OPTICAL");
				break;
			case DeviceSelectDialog::DLT_V1718:
				m_app_settings->m_link_type_string= _("V1718");
				break;
			case DeviceSelectDialog::DLT_V2718:
				m_app_settings->m_link_type_string= _("V2718");
				break;
			}
			m_app_settings->m_link_num= dlg.GetLinkNumber( );
			m_app_settings->m_node_num= dlg.GetNodeNumber( );
			m_app_settings->m_base_address= dlg.GetBaseAddress( );
		}
#ifndef SIMUL
		// 
		// Init VME 
		if( !this->m_app_settings->InitVME( ))
		{
			wxLogError( _("Error getting board handler ..."));
			this->m_main_toolbar->ToggleTool( ID_CONNECT_TOOL, m_is_connected);
			return false;
		}
		// 
		// Connect and create boards
		if( !this->m_app_settings->Connect( ))
#else
		// 
		// Connect and create boards
		if( !this->m_app_settings->Connect( true))
#endif
		{
			wxLogError( _("Error connecting to board ..."));
			this->m_main_toolbar->ToggleTool( ID_CONNECT_TOOL, m_is_connected);
			return false;
		}
		if( !this->m_app_settings->m_board_array.Count())
		{
			wxLogError( _("No board defined ..."));
			this->m_main_toolbar->ToggleTool( ID_CONNECT_TOOL, m_is_connected);
			return false;
		}
		// HACK : MainFrame::SetConnected TBD for multiple board usage
		GenericBoard* generic_board= (GenericBoard*) this->m_app_settings->m_board_array[0];

		//
		// Number of samples per channel
		UINT32 num_ksamples_per_channel= 1024;
		this->m_size_X_control->Clear();

		char tmp[ 50];
#ifndef SIMUL
		if( !generic_board->GetBoardMemory( num_ksamples_per_channel))
		{
			wxLogError( wxString::Format( _T("Cannot read BOARD MEMORY capabilities: defaulting to %d K samples per channel\n"), num_ksamples_per_channel));
		}
#endif
		int n_samples;
		for( int i= CVT_V1724_NBLK_1024; i>= CVT_V1724_NBLK_1; i--)
		{
			if( ( n_samples= ( num_ksamples_per_channel<< 10)/( 1<< i))<= 0)
			{
				continue;
			}
			if( n_samples>> 10) {
				sprintf( tmp, "%i K", n_samples>> 10);
			} else {
				sprintf( tmp, "%i", n_samples);
			}
			int *data= new int();
			*data= n_samples;
			this->m_size_X_control->Append( wxString::FromAscii(tmp), data);
		}
		this->m_size_X_control->SetSelection( 0);

		//
		// Create dynamic controls
		if( !this->CreateDynControls())	
			return false;

		if( !this->UpdateControls())
			return false;

		this->m_main_toolbar->EnableTool( ID_VIEW_LEFT_TOOL, true);
		this->m_main_toolbar->EnableTool( ID_VIEW_BOTTOM_TOOL, true);
		this->m_main_toolbar->EnableTool( ID_VIEW_SCOPE_LEFT_TOP_TOOL, true);
		this->m_main_toolbar->EnableTool( ID_VIEW_SCOPE_RIGHT_TOP_TOOL, true);
		this->m_main_toolbar->EnableTool( ID_VIEW_SCOPE_LEFT_BOTTOM_TOOL, true);
		this->m_main_toolbar->EnableTool( ID_VIEW_SCOPE_RIGHT_BOTTOM_TOOL, true);

		DoShowHideBottomPane( this->m_app_settings->m_show_bottom_pane);
		DoShowHideLeftPane( this->m_app_settings->m_show_left_pane);
		//DoShowHideScopeLeftTopPane( this->m_app_settings->m_show_scope_left_top_pane, true);
		//DoShowHideScopeRightTopPane( this->m_app_settings->m_show_scope_right_top_pane, true);
		//DoShowHideScopeLeftBottomPane( this->m_app_settings->m_show_scope_left_bottom_pane, true);
		//DoShowHideScopeRightBottomPane( this->m_app_settings->m_show_scope_right_bottom_pane, true);
		m_scope_notebook->Show( true);

		Layout();
#ifndef SIMUL

		wxString board_pane_text= wxString::Format( _T("%s  ROC: %s AMC: %s"), 
			generic_board->GetTypeString().c_str(), 
			generic_board->GetROCFwRev().c_str(), 
			generic_board->GetAMCFwRev().c_str()
			);
		this->SetStsBarText( board_pane_text, STS_BAR_PANE_BOARD);
#endif
	}
	else
	{
		this->SetStsBarText( _(""), STS_BAR_PANE_BOARD);
		// Stop acquisition if running
		if( this->m_common_run_control->GetValue())
		{
			this->m_common_run_control->SetValue( false);
			this->DoStartStopRunning( );
		}
		DoShowHideBottomPane( false);
		DoShowHideLeftPane( false);
		m_scope_notebook->Show( false);
		//DoShowHideScopeLeftTopPane( false, true);
		//DoShowHideScopeRightTopPane( false, true);
		//DoShowHideScopeLeftBottomPane( false, true);
		//DoShowHideScopeRightBottomPane( false, true);
		this->m_main_toolbar->EnableTool( ID_VIEW_LEFT_TOOL, false);
		this->m_main_toolbar->EnableTool( ID_VIEW_BOTTOM_TOOL, false);
		this->m_main_toolbar->EnableTool( ID_VIEW_SCOPE_LEFT_TOP_TOOL, false);
		this->m_main_toolbar->EnableTool( ID_VIEW_SCOPE_RIGHT_TOP_TOOL, false);
		this->m_main_toolbar->EnableTool( ID_VIEW_SCOPE_LEFT_BOTTOM_TOOL, false);
		this->m_main_toolbar->EnableTool( ID_VIEW_SCOPE_RIGHT_BOTTOM_TOOL, false);
		// 
		// End VME 
		this->m_app_settings->EndVME( );

		// Save the settings
		m_app_settings->Save();
	}
	m_is_connected= connect;
	return true;
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON
 */

void MainFrame::OnOffsetSecReset1ButtonClick( wxCommandEvent& /*event*/ )
{
	m_offset_sec_position_1_control->SetValue( 0);
	UpdateOffsetSec( 0, 0);
	wxStaticText *labelControl= m_offset_position_1_static;
	SetHoriziontalLabel( labelControl, 0);
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINBUTTON
 */

void MainFrame::OnOffsetSecPosition1SpinbuttonUpdated( wxSpinEvent& /*event */)
{
	wxSpinButton *spinControl= m_offset_sec_position_1_control;
	wxStaticText *labelControl= m_offset_position_1_static;
	int scopeIndex= 0;
	UpdateHorizontalOffset( spinControl, labelControl, scopeIndex);
}
void MainFrame::UpdateHorizontalOffset( wxSpinButton *spinControl, wxStaticText *labelControl, int scopeIndex)
{
	int multiplier= GetHorizontalOffsetMultiplier( scopeIndex);
	int newValue= ( spinControl->GetValue( )- m_app_settings->m_offsetSample[scopeIndex])* multiplier+ m_app_settings->m_offsetSample[scopeIndex];
	spinControl->SetValue( newValue);

	UpdateOffsetSec( scopeIndex, newValue);
	SetHoriziontalLabel( labelControl, newValue);
}
int MainFrame::GetHorizontalOffsetMultiplier( int scopeIndex) const
{
	const int MULTIPLIER_TABLE[]=
	{
		1,
		10,
		100,
		1000,
	};
	wxChoice *control= NULL;
	switch( scopeIndex) 
	{
	case 0:
		control= m_offset_sec_multiplier_1_control;
		break;
	case 1:
		control= m_offset_sec_multiplier_2_control;
		break;
	case 2:
		control= m_offset_sec_multiplier_3_control;
		break;
	case 3:
		control= m_offset_sec_multiplier_4_control;
		break;
	}
	if( !control)
	{
		return 1;
	}
	if( control->GetSelection()>= ( sizeof( MULTIPLIER_TABLE)/ sizeof( MULTIPLIER_TABLE[0])))
	{
		return 1;
	}
	return MULTIPLIER_TABLE[ control->GetSelection()];
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_OFFSET_SEC_RESET_2_BUTTON
 */

void MainFrame::OnOffsetSecReset2ButtonClick( wxCommandEvent& /*event*/ )
{
	m_offset_sec_position_2_control->SetValue( 0);
	UpdateOffsetSec( 1, 0);
	wxStaticText *labelControl= m_offset_position_2_static;
	SetHoriziontalLabel( labelControl, 0);
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINBUTTON
 */

void MainFrame::OnOffsetSecPosition2SpinbuttonUpdated( wxSpinEvent& /*event*/ )
{
	wxSpinButton *spinControl= m_offset_sec_position_2_control;
	wxStaticText *labelControl= m_offset_position_2_static;
	int scopeIndex= 1;
	UpdateHorizontalOffset( spinControl, labelControl, scopeIndex);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON1
 */

void MainFrame::OnOffsetSecReset3ButtonClick( wxCommandEvent& /*event*/ )
{
	m_offset_sec_position_3_control->SetValue( 0);
	UpdateOffsetSec( 2, 0);
	wxStaticText *labelControl= m_offset_position_3_static;
	SetHoriziontalLabel( labelControl, 0);
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINBUTTON1
 */

void MainFrame::OnOffsetSecPosition3SpinbuttonUpdated( wxSpinEvent& /*event*/ )
{
	wxSpinButton *spinControl= m_offset_sec_position_3_control;
	wxStaticText *labelControl= m_offset_position_3_static;
	int scopeIndex= 2;
	UpdateHorizontalOffset( spinControl, labelControl, scopeIndex);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON2
 */

void MainFrame::OnOffsetSecReset4ButtonClick( wxCommandEvent& /*event*/ )
{
	m_offset_sec_position_4_control->SetValue( 0);
	UpdateOffsetSec( 3, 0);
	wxStaticText *labelControl= m_offset_position_4_static;
	SetHoriziontalLabel( labelControl, 0);
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINBUTTON2
 */

void MainFrame::OnOffsetSecPosition4SpinbuttonUpdated( wxSpinEvent& /*event*/ )
{
	wxSpinButton *spinControl= m_offset_sec_position_4_control;
	wxStaticText *labelControl= m_offset_position_4_static;
	int scopeIndex= 3;
	UpdateHorizontalOffset( spinControl, labelControl, scopeIndex);
}

void MainFrame::SetHoriziontalLabel( wxStaticText *control, int valueSample)
{
	PhysicalBoardChannel* board_channel= ( PhysicalBoardChannel*) ((GenericBoard*)this->m_app_settings->m_board_array[0])->m_channel_array[0];
	double valueUSec= board_channel->Sample2Sec( valueSample)* 1000000.0;
	control->SetLabel( wxString::Format( _T("%.3f"), valueUSec));
}



/*!
 * wxEVT_COMMAND_CHECKLISTBOX_TOGGLED event handler for ID_TRIGGER_CHANNEL_ENABLED_CHECKLISTBOX
 */

void MainFrame::OnTriggerChannelEnabledChecklistboxToggled( wxCommandEvent& /*event*/ )
{
	if( m_skipTriggerUpdate)
	{
		return;
	}
	// !!!! NOTE !!!! TriggerChannelEnabledChecklistbox should be enabled just for V1740 board series 
	wxASSERT( ((GenericBoard*)this->m_app_settings->m_board_array[0])->GetType()== CVT_V1740);
	V1740Board* board= (V1740Board*)this->m_app_settings->m_board_array[0];
	UINT32 chMsk= 0;
	for( int i= 0; i< (int)m_triggerEnabledChannelControl->GetCount(); i++)
	{
		if( m_triggerEnabledChannelControl->IsChecked( i))
		{
			chMsk|= (UINT32)( 1<< i);
		}
	}
	if( !board->WriteTriggerChannelMsk( chMsk))
	{
		wxLogError( _("Error writing trigger channel mask"));
	}
}


