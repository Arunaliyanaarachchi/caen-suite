/////////////////////////////////////////////////////////////////////////////
// Name:        cursor_ch_control.h
// Purpose:     
// Author:      NDA
// Modified by: 
// Created:     12/10/2006 10:56:03
// RCS-ID:      
// Copyright:   CAEN S.p.A All rights reserved.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 12/10/2006 10:56:03

#ifndef _CURSOR_CH_CONTROL_H_
#define _CURSOR_CH_CONTROL_H_

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma interface "cursor_ch_control.h"
#endif

/*!
 * Includes
 */

////@begin includes
#include "wx/tglbtn.h"
#include "wx/spinbutt.h"
////@end includes

#include "generic_board.h"
/*!
 * Forward declarations
 */

////@begin forward declarations
class wxToggleButton;
class wxSpinButton;
////@end forward declarations

/*!
 * Control identifiers
 */

////@begin control identifiers
#define ID_CURSORCHCONTROL 10044
#define SYMBOL_CURSORCHCONTROL_STYLE 0
#define SYMBOL_CURSORCHCONTROL_TITLE _("CursorChControl")
#define SYMBOL_CURSORCHCONTROL_IDNAME ID_CURSORCHCONTROL
#define SYMBOL_CURSORCHCONTROL_SIZE wxSize(400, 300)
#define SYMBOL_CURSORCHCONTROL_POSITION wxDefaultPosition
#define ID_CURSOR_TOGGLEBUTTON 10001
#define ID_CHANNEL_CHOICE 10000
#define ID_CURSOR_0_RESET_BUTTON 10004
#define ID_CURSOR_0_POSITION_SPINBUTTON 10005
#define ID_CURSOR_0_POS_MULTIPLIER_CHOICE 10045
#define ID_CURSOR_1_RESET_BUTTON 10003
#define ID_CURSOR_1_POSITION_SPINBUTTON 10006
#define ID_CURSOR_1_POS_MULTIPLIER_CHOICE 10007
////@end control identifiers

/*!
 * Compatibility
 */

#ifndef wxCLOSE_BOX
#define wxCLOSE_BOX 0x1000
#endif

/*!
 * CursorChControl class declaration
 */

class CursorChControl: public wxPanel
{    
    DECLARE_DYNAMIC_CLASS( CursorChControl )
    DECLARE_EVENT_TABLE()

public:
    /// Constructors
    CursorChControl( );
    CursorChControl( int scope_index, wxMutex *mutex, wxWindow* parent, wxWindowID id = SYMBOL_CURSORCHCONTROL_IDNAME, const wxPoint& pos = SYMBOL_CURSORCHCONTROL_POSITION, const wxSize& size = SYMBOL_CURSORCHCONTROL_SIZE, long style = SYMBOL_CURSORCHCONTROL_STYLE );

    /// Creation
    bool Create( wxWindow* parent, wxWindowID id = SYMBOL_CURSORCHCONTROL_IDNAME, const wxPoint& pos = SYMBOL_CURSORCHCONTROL_POSITION, const wxSize& size = SYMBOL_CURSORCHCONTROL_SIZE, long style = SYMBOL_CURSORCHCONTROL_STYLE );

    /// Creates the controls and sizers
    void CreateControls();

////@begin CursorChControl event handler declarations

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CURSOR_TOGGLEBUTTON
    void OnCursorTogglebuttonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CHANNEL_CHOICE
    void OnChannelChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CURSOR_0_RESET_BUTTON
    void OnCursor0ResetButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_CURSOR_0_POSITION_SPINBUTTON
    void OnCursor0PositionSpinbuttonUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CURSOR_0_POS_MULTIPLIER_CHOICE
    void OnCursor0PosMultiplierChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CURSOR_1_RESET_BUTTON
    void OnCursor1ResetButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_CURSOR_1_POSITION_SPINBUTTON
    void OnCursor1PositionSpinbuttonUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CURSOR_1_POS_MULTIPLIER_CHOICE
    void OnCursor1PosMultiplierChoiceSelected( wxCommandEvent& event );

////@end CursorChControl event handler declarations

////@begin CursorChControl member function declarations

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end CursorChControl member function declarations

    /// Should we show tooltips?
    static bool ShowToolTips();

////@begin CursorChControl member variables
    wxToggleButton* m_cursor_enable_control;
    wxChoice* m_channel_control;
    wxButton* m_ch_cursor_0_reset_control;
    wxSpinButton* m_set_cursor_0_position_control;
    wxChoice* m_cursor_0_pos_multiplier_control;
    wxStaticText* m_cursor_0_position_control;
    wxStaticText* m_cursor_0_value_control;
    wxButton* m_ch_cursor_1_reset_control;
    wxSpinButton* m_set_cursor_1_position_control;
    wxChoice* m_cursor_1_pos_multiplier_control;
    wxStaticText* m_cursor_1_position_control;
    wxStaticText* m_cursor_1_value_control;
    wxStaticText* m_delta_position_control;
    wxStaticText* m_delta_value_control;
////@end CursorChControl member variables
	bool SetupBoard( GenericBoard* p_board);
	void UpdateChannelEnable();
	void SetCursorValues( double cursor_values[ SCOPE_NUM_CURSORS]);
private: 
	bool UpdateCursorPosition( int cursor_position, int cursor_index);
	void OnCursorPositionChanged( int cursor_index);
	void SetupChannel( bool do_lock);
	int GetCursorMultipler( int cursor_index);
	// Generic Board pointer
	GenericBoard* m_p_board;
	GenericBoardChannel* m_p_board_channel;
	int m_scope_index;
	int m_last_cursor_pos[ SCOPE_NUM_CURSORS];
	wxMutex *m_mutex;
    wxButton* m_helper_ch_cursor_reset_control[ SCOPE_NUM_CURSORS];
    wxSpinButton* m_helper_set_cursor_position_control[ SCOPE_NUM_CURSORS];
    wxChoice* m_helper_cursor_pos_multiplier_control[ SCOPE_NUM_CURSORS];
    wxStaticText* m_helper_cursor_position_control[ SCOPE_NUM_CURSORS];
    wxStaticText* m_helper_cursor_value_control[ SCOPE_NUM_CURSORS];

};

#endif
    // _CURSOR_CH_CONTROL_H_
