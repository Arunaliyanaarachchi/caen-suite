/////////////////////////////////////////////////////////////////////////////
// Name:        device_select_dialog.h
// Purpose:     
// Author:      NDA
// Modified by: 
// Created:     24/10/2010 16:29:18
// RCS-ID:      
// Copyright:   CAEN S.p.A All rights reserved.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 24/10/2010 16:29:18

#ifndef _DEVICE_SELECT_DIALOG_H_
#define _DEVICE_SELECT_DIALOG_H_

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma interface "device_select_dialog.h"
#endif

/*!
 * Includes
 */

////@begin includes
#include "wx/spinctrl.h"
////@end includes

/*!
 * Forward declarations
 */

////@begin forward declarations
class wxBoxSizer;
class wxSpinCtrl;
////@end forward declarations

/*!
 * Control identifiers
 */

////@begin control identifiers
#define ID_DEVICE_SELECT_DIALOG 10074
#define SYMBOL_DEVICESELECTDIALOG_STYLE wxCAPTION|wxRESIZE_BORDER|wxSYSTEM_MENU|wxCLOSE_BOX
#define SYMBOL_DEVICESELECTDIALOG_TITLE _("Device selection")
#define SYMBOL_DEVICESELECTDIALOG_IDNAME ID_DEVICE_SELECT_DIALOG
#define SYMBOL_DEVICESELECTDIALOG_SIZE wxSize(550, 250)
#define SYMBOL_DEVICESELECTDIALOG_POSITION wxDefaultPosition
#define ID_VCH_DEF_LEFT_PANEL 11000
#define ID_DS_LINK_TYPE_CHOICE 10079
#define ID_DS_LINK_NUMBER_SPINCTRL 10081
#define ID_DS_NODE_NUMBER_SPINCTRL 10000
#define ID_DS_BASE_ADDRESS_TEXTCTRL 10001
#define ID_VCH_DEF_RIGHT_PANEL 11001
#define ID_DS_OK_BUTTON 10078
#define ID_DS_CANCEL_BUTTON 10002
////@end control identifiers

/*!
 * Compatibility
 */

#ifndef wxCLOSE_BOX
#define wxCLOSE_BOX 0x1000
#endif

/*!
 * DeviceSelectDialog class declaration
 */

class DeviceSelectDialog: public wxDialog
{    
    DECLARE_DYNAMIC_CLASS( DeviceSelectDialog )
    DECLARE_EVENT_TABLE()

public:
    /// Constructors
    DeviceSelectDialog( );
    DeviceSelectDialog( wxWindow* parent, wxWindowID id = SYMBOL_DEVICESELECTDIALOG_IDNAME, const wxString& caption = SYMBOL_DEVICESELECTDIALOG_TITLE, const wxPoint& pos = SYMBOL_DEVICESELECTDIALOG_POSITION, const wxSize& size = SYMBOL_DEVICESELECTDIALOG_SIZE, long style = SYMBOL_DEVICESELECTDIALOG_STYLE );

    /// Creation
    bool Create( wxWindow* parent, wxWindowID id = SYMBOL_DEVICESELECTDIALOG_IDNAME, const wxString& caption = SYMBOL_DEVICESELECTDIALOG_TITLE, const wxPoint& pos = SYMBOL_DEVICESELECTDIALOG_POSITION, const wxSize& size = SYMBOL_DEVICESELECTDIALOG_SIZE, long style = SYMBOL_DEVICESELECTDIALOG_STYLE );

    /// Creates the controls and sizers
    void CreateControls();

////@begin DeviceSelectDialog event handler declarations

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_DS_LINK_TYPE_CHOICE
    void OnDsLinkTypeChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DS_OK_BUTTON
    void OnDsOkButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DS_CANCEL_BUTTON
    void OnDsCancelButtonClick( wxCommandEvent& event );

////@end DeviceSelectDialog event handler declarations

////@begin DeviceSelectDialog member function declarations

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end DeviceSelectDialog member function declarations

    /// Should we show tooltips?
    static bool ShowToolTips();

////@begin DeviceSelectDialog member variables
    wxPanel* m_left_panel;
    wxBoxSizer* m_left_sizer;
    wxChoice* m_link_type_ctrl;
    wxSpinCtrl* m_link_number_ctrl;
    wxSpinCtrl* m_node_number_ctrl;
    wxTextCtrl* m_base_address_ctrl;
////@end DeviceSelectDialog member variables

	// Link types : keep synchronized with the link type combo items
	enum LINK_TYPES
	{
		DLT_USB,
		DLT_OPTICAL,
		DLT_V1718,
		DLT_V2718,
	};

	void SetLinkType( LINK_TYPES link_type)
	{
		m_link_type_ctrl->Select( (int)link_type);
		UpdateLinkControls();
	}
	void SetLinkNumber( int link_number)
	{
		m_link_number_ctrl->SetValue( link_number);
	}
	void SetNodeNumber( int node_number)
	{
		m_node_number_ctrl->SetValue( node_number);
	}
	void SetBaseAddress( int base_address)
	{
		m_base_address_ctrl->SetValue( wxString::Format( _T("%04X"), base_address));
	}

	LINK_TYPES GetLinkType( ) const
	{
		return (LINK_TYPES )m_link_type_ctrl->GetSelection( );
	}
	int GetLinkNumber( )
	{
		return m_link_number_ctrl->GetValue( );
	}
	int GetNodeNumber( )
	{
		return m_node_number_ctrl->GetValue( );
	}
	int GetBaseAddress( )
	{
		unsigned long base_address= 0;
		if( !m_base_address_ctrl->GetValue().Trim().ToULong( &base_address, 16))
		{
			return -1;
		}
		return (int)base_address;
	}

	
protected:
	void UpdateLinkControls();
protected:

};

#endif
    // _DEVICE_SELECT_DIALOG_H_
